
1602clcd_CGRAM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000004c4  00000558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800150  00800150  000005a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016de  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb0  00000000  00000000  00001e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a39  00000000  00000000  00002abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  000034f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061c  00000000  00000000  000037cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e12  00000000  00000000  00003de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004bfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	a7 c1       	rjmp	.+846    	; 0x398 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ec       	ldi	r30, 0xC4	; 196
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 35       	cpi	r26, 0x50	; 80
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e5       	ldi	r26, 0x50	; 80
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 35       	cpi	r26, 0x5A	; 90
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	fd c1       	rjmp	.+1018   	; 0x4c0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
uint8_t data1[8] = {0x02, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00};
uint8_t data2[8] = {0x00, 0x0A, 0x00, 0x00, 0x11, 0x11, 0x0E, 0x00};

int main(void)
{
	uart0_init();
  c8:	b3 d1       	rcall	.+870    	; 0x430 <uart0_init>
	i2c_lcd_init();
  ca:	51 d0       	rcall	.+162    	; 0x16e <i2c_lcd_init>
  cc:	68 e0       	ldi	r22, 0x08	; 8
	i2c_set_CGRAM(0x00, data1);
  ce:	71 e0       	ldi	r23, 0x01	; 1
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	d5 d0       	rcall	.+426    	; 0x27e <i2c_set_CGRAM>
  d4:	60 e0       	ldi	r22, 0x00	; 0
	i2c_set_CGRAM(0x01, data2);
  d6:	71 e0       	ldi	r23, 0x01	; 1
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	d1 d0       	rcall	.+418    	; 0x27e <i2c_set_CGRAM>

	i2c_lcd_goto_XY(0, 0);
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	80 e0       	ldi	r24, 0x00	; 0
	i2c_lcd_data(0);
  e0:	c6 d0       	rcall	.+396    	; 0x26e <i2c_lcd_goto_XY>
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	9d d0       	rcall	.+314    	; 0x220 <i2c_lcd_data>
	i2c_lcd_data(1);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	9b d0       	rcall	.+310    	; 0x220 <i2c_lcd_data>
  ea:	ff cf       	rjmp	.-2      	; 0xea <main+0x22>

000000ec <i2c_lcd_command_8>:
  ec:	cf 93       	push	r28
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
		i2c_lcd_data(*string++);
	}
}
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <i2c_lcd_command_8+0x6>
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	98 2f       	mov	r25, r24
  fa:	9c 60       	ori	r25, 0x0C	; 12
  fc:	99 83       	std	Y+1, r25	; 0x01
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	8a 83       	std	Y+2, r24	; 0x02
 102:	42 e0       	ldi	r20, 0x02	; 2
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	be 01       	movw	r22, r28
 108:	6f 5f       	subi	r22, 0xFF	; 255
 10a:	7f 4f       	sbci	r23, 0xFF	; 255
 10c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <I2C_addr_PCF8574>
 110:	09 d1       	rcall	.+530    	; 0x324 <i2c_transmit>
 112:	81 11       	cpse	r24, r1
 114:	f6 cf       	rjmp	.-20     	; 0x102 <i2c_lcd_command_8+0x16>
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <i2c_lcd_command>:
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	00 d0       	rcall	.+0      	; 0x126 <i2c_lcd_command+0x6>
 126:	00 d0       	rcall	.+0      	; 0x128 <i2c_lcd_command+0x8>
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	98 2f       	mov	r25, r24
 12e:	90 7f       	andi	r25, 0xF0	; 240
 130:	29 2f       	mov	r18, r25
 132:	2c 60       	ori	r18, 0x0C	; 12
 134:	29 83       	std	Y+1, r18	; 0x01
 136:	98 60       	ori	r25, 0x08	; 8
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	20 e1       	ldi	r18, 0x10	; 16
 13c:	82 9f       	mul	r24, r18
 13e:	c0 01       	movw	r24, r0
 140:	11 24       	eor	r1, r1
 142:	98 2f       	mov	r25, r24
 144:	9c 60       	ori	r25, 0x0C	; 12
 146:	9b 83       	std	Y+3, r25	; 0x03
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	8c 83       	std	Y+4, r24	; 0x04
 14c:	44 e0       	ldi	r20, 0x04	; 4
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	be 01       	movw	r22, r28
 152:	6f 5f       	subi	r22, 0xFF	; 255
 154:	7f 4f       	sbci	r23, 0xFF	; 255
 156:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <I2C_addr_PCF8574>
 15a:	e4 d0       	rcall	.+456    	; 0x324 <i2c_transmit>
 15c:	81 11       	cpse	r24, r1
 15e:	f6 cf       	rjmp	.-20     	; 0x14c <i2c_lcd_command+0x2c>
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <i2c_lcd_init>:
 16e:	9f d0       	rcall	.+318    	; 0x2ae <i2c_init>
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	89 e6       	ldi	r24, 0x69	; 105
 174:	98 e1       	ldi	r25, 0x18	; 24
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <i2c_lcd_init+0x8>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <i2c_lcd_init+0x12>
 180:	00 00       	nop
 182:	8d e2       	ldi	r24, 0x2D	; 45
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	6c d1       	rcall	.+728    	; 0x460 <puts>
 188:	80 e3       	ldi	r24, 0x30	; 48
 18a:	b0 df       	rcall	.-160    	; 0xec <i2c_lcd_command_8>
 18c:	8f e1       	ldi	r24, 0x1F	; 31
 18e:	9e e4       	ldi	r25, 0x4E	; 78
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <i2c_lcd_init+0x22>
 194:	00 c0       	rjmp	.+0      	; 0x196 <i2c_lcd_init+0x28>
 196:	00 00       	nop
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	a8 df       	rcall	.-176    	; 0xec <i2c_lcd_command_8>
 19c:	8f e8       	ldi	r24, 0x8F	; 143
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <i2c_lcd_init+0x32>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <i2c_lcd_init+0x38>
 1a6:	00 00       	nop
 1a8:	80 e3       	ldi	r24, 0x30	; 48
 1aa:	a0 df       	rcall	.-192    	; 0xec <i2c_lcd_command_8>
 1ac:	8f e8       	ldi	r24, 0x8F	; 143
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <i2c_lcd_init+0x42>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <i2c_lcd_init+0x48>
 1b6:	00 00       	nop
 1b8:	80 e2       	ldi	r24, 0x20	; 32
 1ba:	98 df       	rcall	.-208    	; 0xec <i2c_lcd_command_8>
 1bc:	8f e8       	ldi	r24, 0x8F	; 143
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <i2c_lcd_init+0x52>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <i2c_lcd_init+0x58>
 1c6:	00 00       	nop
 1c8:	88 e2       	ldi	r24, 0x28	; 40
 1ca:	aa df       	rcall	.-172    	; 0x120 <i2c_lcd_command>
 1cc:	87 ec       	ldi	r24, 0xC7	; 199
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <i2c_lcd_init+0x62>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <i2c_lcd_init+0x68>
 1d6:	00 00       	nop
 1d8:	88 e0       	ldi	r24, 0x08	; 8
 1da:	a2 df       	rcall	.-188    	; 0x120 <i2c_lcd_command>
 1dc:	87 ec       	ldi	r24, 0xC7	; 199
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <i2c_lcd_init+0x72>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <i2c_lcd_init+0x78>
 1e6:	00 00       	nop
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	9a df       	rcall	.-204    	; 0x120 <i2c_lcd_command>
 1ec:	8f ed       	ldi	r24, 0xDF	; 223
 1ee:	9e e2       	ldi	r25, 0x2E	; 46
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <i2c_lcd_init+0x82>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <i2c_lcd_init+0x88>
 1f6:	00 00       	nop
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	92 df       	rcall	.-220    	; 0x120 <i2c_lcd_command>
 1fc:	87 ec       	ldi	r24, 0xC7	; 199
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <i2c_lcd_init+0x92>
 204:	00 c0       	rjmp	.+0      	; 0x206 <i2c_lcd_init+0x98>
 206:	00 00       	nop
 208:	8c e0       	ldi	r24, 0x0C	; 12
 20a:	8a df       	rcall	.-236    	; 0x120 <i2c_lcd_command>
 20c:	87 ec       	ldi	r24, 0xC7	; 199
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <i2c_lcd_init+0xa2>
 214:	00 c0       	rjmp	.+0      	; 0x216 <i2c_lcd_init+0xa8>
 216:	00 00       	nop
 218:	84 e4       	ldi	r24, 0x44	; 68
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	21 c1       	rjmp	.+578    	; 0x460 <puts>
 21e:	08 95       	ret

00000220 <i2c_lcd_data>:
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	00 d0       	rcall	.+0      	; 0x226 <i2c_lcd_data+0x6>
 226:	00 d0       	rcall	.+0      	; 0x228 <i2c_lcd_data+0x8>
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	98 2f       	mov	r25, r24
 22e:	90 7f       	andi	r25, 0xF0	; 240
 230:	29 2f       	mov	r18, r25
 232:	2d 60       	ori	r18, 0x0D	; 13
 234:	29 83       	std	Y+1, r18	; 0x01
 236:	99 60       	ori	r25, 0x09	; 9
 238:	9a 83       	std	Y+2, r25	; 0x02
 23a:	20 e1       	ldi	r18, 0x10	; 16
 23c:	82 9f       	mul	r24, r18
 23e:	c0 01       	movw	r24, r0
 240:	11 24       	eor	r1, r1
 242:	98 2f       	mov	r25, r24
 244:	9d 60       	ori	r25, 0x0D	; 13
 246:	9b 83       	std	Y+3, r25	; 0x03
 248:	89 60       	ori	r24, 0x09	; 9
 24a:	8c 83       	std	Y+4, r24	; 0x04
 24c:	44 e0       	ldi	r20, 0x04	; 4
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	be 01       	movw	r22, r28
 252:	6f 5f       	subi	r22, 0xFF	; 255
 254:	7f 4f       	sbci	r23, 0xFF	; 255
 256:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <I2C_addr_PCF8574>
 25a:	64 d0       	rcall	.+200    	; 0x324 <i2c_transmit>
 25c:	81 11       	cpse	r24, r1
 25e:	f6 cf       	rjmp	.-20     	; 0x24c <i2c_lcd_data+0x2c>
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <i2c_lcd_goto_XY>:
 26e:	90 e4       	ldi	r25, 0x40	; 64
 270:	89 9f       	mul	r24, r25
 272:	60 0d       	add	r22, r0
 274:	11 24       	eor	r1, r1
 276:	86 2f       	mov	r24, r22
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	52 cf       	rjmp	.-348    	; 0x120 <i2c_lcd_command>
 27c:	08 95       	ret

0000027e <i2c_set_CGRAM>:

void i2c_set_CGRAM(uint8_t addr, uint8_t *data) 
{
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	8b 01       	movw	r16, r22
	uint8_t start_addr = CGRAM_BASE_ADDR | (addr << 3);
	i2c_lcd_command(start_addr);
 288:	28 e0       	ldi	r18, 0x08	; 8
 28a:	82 9f       	mul	r24, r18
 28c:	c0 01       	movw	r24, r0
 28e:	11 24       	eor	r1, r1
 290:	80 64       	ori	r24, 0x40	; 64
 292:	46 df       	rcall	.-372    	; 0x120 <i2c_lcd_command>
 294:	e8 01       	movw	r28, r16
 296:	08 5f       	subi	r16, 0xF8	; 248
 298:	1f 4f       	sbci	r17, 0xFF	; 255
	for(int i=0; i<8; i++) {
		i2c_lcd_data(data[i]);
 29a:	89 91       	ld	r24, Y+
 29c:	c1 df       	rcall	.-126    	; 0x220 <i2c_lcd_data>

void i2c_set_CGRAM(uint8_t addr, uint8_t *data) 
{
	uint8_t start_addr = CGRAM_BASE_ADDR | (addr << 3);
	i2c_lcd_command(start_addr);
	for(int i=0; i<8; i++) {
 29e:	c0 17       	cp	r28, r16
 2a0:	d1 07       	cpc	r29, r17
 2a2:	d9 f7       	brne	.-10     	; 0x29a <i2c_set_CGRAM+0x1c>
		i2c_lcd_data(data[i]);
	}
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	08 95       	ret

000002ae <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
 2ae:	88 e4       	ldi	r24, 0x48	; 72
 2b0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 2b4:	08 95       	ret

000002b6 <i2c_start>:
 2b6:	e4 e7       	ldi	r30, 0x74	; 116
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	10 82       	st	Z, r1
 2bc:	94 ea       	ldi	r25, 0xA4	; 164
 2be:	90 83       	st	Z, r25
 2c0:	90 81       	ld	r25, Z
 2c2:	99 23       	and	r25, r25
 2c4:	ec f7       	brge	.-6      	; 0x2c0 <i2c_start+0xa>
 2c6:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 2ca:	98 7f       	andi	r25, 0xF8	; 248
 2cc:	98 30       	cpi	r25, 0x08	; 8
 2ce:	a1 f4       	brne	.+40     	; 0x2f8 <i2c_start+0x42>
 2d0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 2d4:	84 e8       	ldi	r24, 0x84	; 132
 2d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2da:	e4 e7       	ldi	r30, 0x74	; 116
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	88 23       	and	r24, r24
 2e2:	ec f7       	brge	.-6      	; 0x2de <i2c_start+0x28>
 2e4:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 2e8:	98 7f       	andi	r25, 0xF8	; 248
 2ea:	98 31       	cpi	r25, 0x18	; 24
 2ec:	39 f0       	breq	.+14     	; 0x2fc <i2c_start+0x46>
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 34       	cpi	r25, 0x40	; 64
 2f2:	29 f4       	brne	.+10     	; 0x2fe <i2c_start+0x48>
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	08 95       	ret
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	08 95       	ret
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	08 95       	ret

00000300 <i2c_write>:
 300:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 304:	84 e8       	ldi	r24, 0x84	; 132
 306:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 30a:	e4 e7       	ldi	r30, 0x74	; 116
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	88 23       	and	r24, r24
 312:	ec f7       	brge	.-6      	; 0x30e <i2c_write+0xe>
 314:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 318:	98 7f       	andi	r25, 0xF8	; 248
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	98 32       	cpi	r25, 0x28	; 40
 31e:	09 f4       	brne	.+2      	; 0x322 <i2c_write+0x22>
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	08 95       	ret

00000324 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
 324:	cf 92       	push	r12
 326:	df 92       	push	r13
 328:	ff 92       	push	r15
 32a:	0f 93       	push	r16
 32c:	1f 93       	push	r17
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	6b 01       	movw	r12, r22
 334:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
 336:	bf df       	rcall	.-130    	; 0x2b6 <i2c_start>
 338:	f8 2e       	mov	r15, r24
 33a:	81 11       	cpse	r24, r1
 33c:	17 c0       	rjmp	.+46     	; 0x36c <i2c_transmit+0x48>
	
	for (uint16_t i = 0; i < length; i++)
 33e:	01 15       	cp	r16, r1
 340:	11 05       	cpc	r17, r1
 342:	81 f0       	breq	.+32     	; 0x364 <i2c_transmit+0x40>
 344:	e6 01       	movw	r28, r12
 346:	0c 0d       	add	r16, r12
 348:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 34a:	89 91       	ld	r24, Y+
 34c:	d9 df       	rcall	.-78     	; 0x300 <i2c_write>
 34e:	81 11       	cpse	r24, r1
 350:	10 c0       	rjmp	.+32     	; 0x372 <i2c_transmit+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 352:	8f e9       	ldi	r24, 0x9F	; 159
 354:	9f e0       	ldi	r25, 0x0F	; 15
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <i2c_transmit+0x32>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <i2c_transmit+0x38>
 35c:	00 00       	nop

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
 35e:	0c 17       	cp	r16, r28
 360:	1d 07       	cpc	r17, r29
 362:	99 f7       	brne	.-26     	; 0x34a <i2c_transmit+0x26>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 364:	84 e9       	ldi	r24, 0x94	; 148
 366:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 36a:	05 c0       	rjmp	.+10     	; 0x376 <i2c_transmit+0x52>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
 36c:	ff 24       	eor	r15, r15
 36e:	f3 94       	inc	r15
 370:	02 c0       	rjmp	.+4      	; 0x376 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 372:	ff 24       	eor	r15, r15
 374:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
 376:	8f 2d       	mov	r24, r15
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	ff 90       	pop	r15
 382:	df 90       	pop	r13
 384:	cf 90       	pop	r12
 386:	08 95       	ret

00000388 <uart0_trasnmit>:
	 stdin = &INPUT;
	 stdout = &OUTPUT;
 }

 void uart0_trasnmit(char data) {
	 while(!(UCSR0A & (1 << UDRE0)));
 388:	5d 9b       	sbis	0x0b, 5	; 11
 38a:	fe cf       	rjmp	.-4      	; 0x388 <uart0_trasnmit>
	 UDR0 = data;
 38c:	8c b9       	out	0x0c, r24	; 12
 38e:	08 95       	ret

00000390 <uart0_receive>:
 }

 unsigned char uart0_receive(void) {
	 while(!(UCSR0A & (1 << RXC0)));
 390:	5f 9b       	sbis	0x0b, 7	; 11
 392:	fe cf       	rjmp	.-4      	; 0x390 <uart0_receive>
	 return UDR0;
 394:	8c b1       	in	r24, 0x0c	; 12
 }
 396:	08 95       	ret

00000398 <__vector_18>:
FILE INPUT = FDEV_SETUP_STREAM(NULL, uart0_receive, _FDEV_SETUP_READ);

volatile int flag;
volatile int rxdata;

ISR(USART0_RX_vect) {
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	2f 93       	push	r18
 3a4:	3f 93       	push	r19
 3a6:	4f 93       	push	r20
 3a8:	5f 93       	push	r21
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
	unsigned char tmp = UDR0;
 3ae:	8c b1       	in	r24, 0x0c	; 12
	if(tmp >= '0' && tmp <= '9') {
 3b0:	90 ed       	ldi	r25, 0xD0	; 208
 3b2:	98 0f       	add	r25, r24
 3b4:	9a 30       	cpi	r25, 0x0A	; 10
 3b6:	58 f5       	brcc	.+86     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		if(flag) {
 3b8:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
 3bc:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <__data_end+0x1>
 3c0:	23 2b       	or	r18, r19
 3c2:	c1 f0       	breq	.+48     	; 0x3f4 <__vector_18+0x5c>
			rxdata = rxdata * 10 + tmp - '0';
 3c4:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <rxdata>
 3c8:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <rxdata+0x1>
 3cc:	a9 01       	movw	r20, r18
 3ce:	44 0f       	add	r20, r20
 3d0:	55 1f       	adc	r21, r21
 3d2:	22 0f       	add	r18, r18
 3d4:	33 1f       	adc	r19, r19
 3d6:	22 0f       	add	r18, r18
 3d8:	33 1f       	adc	r19, r19
 3da:	22 0f       	add	r18, r18
 3dc:	33 1f       	adc	r19, r19
 3de:	24 0f       	add	r18, r20
 3e0:	35 1f       	adc	r19, r21
 3e2:	28 0f       	add	r18, r24
 3e4:	31 1d       	adc	r19, r1
 3e6:	20 53       	subi	r18, 0x30	; 48
 3e8:	31 09       	sbc	r19, r1
 3ea:	30 93 53 01 	sts	0x0153, r19	; 0x800153 <rxdata+0x1>
 3ee:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <rxdata>
 3f2:	13 c0       	rjmp	.+38     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		}
		else {
			rxdata = tmp - '0';
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	c0 97       	sbiw	r24, 0x30	; 48
 3f8:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <rxdata+0x1>
 3fc:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <rxdata>
			flag = 1;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <__data_end+0x1>
 408:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
 40c:	06 c0       	rjmp	.+12     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		}
	}
	else if(tmp == '\r') {
 40e:	8d 30       	cpi	r24, 0x0D	; 13
 410:	21 f4       	brne	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		flag = 0;
 412:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <__data_end+0x1>
 416:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <__data_end>
	}
}
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	5f 91       	pop	r21
 420:	4f 91       	pop	r20
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <uart0_init>:

 void uart0_init(void) {
	 UBRR0H = 0x00;
 430:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	 UBRR0L = 16;
 434:	80 e1       	ldi	r24, 0x10	; 16
 436:	89 b9       	out	0x09, r24	; 9
	 
	 UCSR0A |= (1<<U2X0);
 438:	59 9a       	sbi	0x0b, 1	; 11
	 UCSR0C |= 0x06;
 43a:	e5 e9       	ldi	r30, 0x95	; 149
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	86 60       	ori	r24, 0x06	; 6
 442:	80 83       	st	Z, r24

	 UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
 444:	8a b1       	in	r24, 0x0a	; 10
 446:	88 61       	ori	r24, 0x18	; 24
 448:	8a b9       	out	0x0a, r24	; 10

	 stdin = &INPUT;
 44a:	e4 e5       	ldi	r30, 0x54	; 84
 44c:	f1 e0       	ldi	r31, 0x01	; 1
 44e:	81 e1       	ldi	r24, 0x11	; 17
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	91 83       	std	Z+1, r25	; 0x01
 454:	80 83       	st	Z, r24
	 stdout = &OUTPUT;
 456:	8f e1       	ldi	r24, 0x1F	; 31
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	93 83       	std	Z+3, r25	; 0x03
 45c:	82 83       	std	Z+2, r24	; 0x02
 45e:	08 95       	ret

00000460 <puts>:
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <__iob+0x2>
 46c:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <__iob+0x3>
 470:	23 81       	ldd	r18, Z+3	; 0x03
 472:	21 ff       	sbrs	r18, 1
 474:	1b c0       	rjmp	.+54     	; 0x4ac <puts+0x4c>
 476:	8c 01       	movw	r16, r24
 478:	d0 e0       	ldi	r29, 0x00	; 0
 47a:	c0 e0       	ldi	r28, 0x00	; 0
 47c:	f8 01       	movw	r30, r16
 47e:	81 91       	ld	r24, Z+
 480:	8f 01       	movw	r16, r30
 482:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <__iob+0x2>
 486:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <__iob+0x3>
 48a:	db 01       	movw	r26, r22
 48c:	18 96       	adiw	r26, 0x08	; 8
 48e:	ed 91       	ld	r30, X+
 490:	fc 91       	ld	r31, X
 492:	19 97       	sbiw	r26, 0x09	; 9
 494:	88 23       	and	r24, r24
 496:	31 f0       	breq	.+12     	; 0x4a4 <puts+0x44>
 498:	09 95       	icall
 49a:	89 2b       	or	r24, r25
 49c:	79 f3       	breq	.-34     	; 0x47c <puts+0x1c>
 49e:	df ef       	ldi	r29, 0xFF	; 255
 4a0:	cf ef       	ldi	r28, 0xFF	; 255
 4a2:	ec cf       	rjmp	.-40     	; 0x47c <puts+0x1c>
 4a4:	8a e0       	ldi	r24, 0x0A	; 10
 4a6:	09 95       	icall
 4a8:	89 2b       	or	r24, r25
 4aa:	19 f0       	breq	.+6      	; 0x4b2 <puts+0x52>
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	9f ef       	ldi	r25, 0xFF	; 255
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <puts+0x56>
 4b2:	8d 2f       	mov	r24, r29
 4b4:	9c 2f       	mov	r25, r28
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	1f 91       	pop	r17
 4bc:	0f 91       	pop	r16
 4be:	08 95       	ret

000004c0 <_exit>:
 4c0:	f8 94       	cli

000004c2 <__stop_program>:
 4c2:	ff cf       	rjmp	.-2      	; 0x4c2 <__stop_program>
