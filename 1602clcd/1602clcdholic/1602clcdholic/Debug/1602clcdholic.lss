
1602clcdholic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000032c  000003c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  000003c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012d9  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000acf  00000000  00000000  000017c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000785  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00002a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000554  00000000  00000000  00002c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b3d  00000000  00000000  00003164  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003ca1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e2       	ldi	r30, 0x2C	; 44
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	13 d1       	rcall	.+550    	; 0x2ea <main>
  c4:	31 c1       	rjmp	.+610    	; 0x328 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
  c8:	88 e4       	ldi	r24, 0x48	; 72
  ca:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  ce:	08 95       	ret

000000d0 <i2c_start>:
  d0:	e4 e7       	ldi	r30, 0x74	; 116
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	10 82       	st	Z, r1
  d6:	94 ea       	ldi	r25, 0xA4	; 164
  d8:	90 83       	st	Z, r25
  da:	90 81       	ld	r25, Z
  dc:	99 23       	and	r25, r25
  de:	ec f7       	brge	.-6      	; 0xda <i2c_start+0xa>
  e0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  e4:	98 7f       	andi	r25, 0xF8	; 248
  e6:	98 30       	cpi	r25, 0x08	; 8
  e8:	a1 f4       	brne	.+40     	; 0x112 <i2c_start+0x42>
  ea:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  ee:	84 e8       	ldi	r24, 0x84	; 132
  f0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  f4:	e4 e7       	ldi	r30, 0x74	; 116
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 23       	and	r24, r24
  fc:	ec f7       	brge	.-6      	; 0xf8 <i2c_start+0x28>
  fe:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 102:	98 7f       	andi	r25, 0xF8	; 248
 104:	98 31       	cpi	r25, 0x18	; 24
 106:	39 f0       	breq	.+14     	; 0x116 <i2c_start+0x46>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 34       	cpi	r25, 0x40	; 64
 10c:	29 f4       	brne	.+10     	; 0x118 <i2c_start+0x48>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	08 95       	ret
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	08 95       	ret
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	08 95       	ret

0000011a <i2c_write>:
 11a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 11e:	84 e8       	ldi	r24, 0x84	; 132
 120:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 124:	e4 e7       	ldi	r30, 0x74	; 116
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 23       	and	r24, r24
 12c:	ec f7       	brge	.-6      	; 0x128 <i2c_write+0xe>
 12e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 132:	98 7f       	andi	r25, 0xF8	; 248
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	98 32       	cpi	r25, 0x28	; 40
 138:	09 f4       	brne	.+2      	; 0x13c <i2c_write+0x22>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 95       	ret

0000013e <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
 13e:	cf 92       	push	r12
 140:	df 92       	push	r13
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	6b 01       	movw	r12, r22
 14e:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
 150:	bf df       	rcall	.-130    	; 0xd0 <i2c_start>
 152:	f8 2e       	mov	r15, r24
 154:	81 11       	cpse	r24, r1
 156:	15 c0       	rjmp	.+42     	; 0x182 <i2c_transmit+0x44>
	
	for (uint16_t i = 0; i < length; i++)
 158:	01 15       	cp	r16, r1
 15a:	11 05       	cpc	r17, r1
 15c:	71 f0       	breq	.+28     	; 0x17a <i2c_transmit+0x3c>
 15e:	e6 01       	movw	r28, r12
 160:	0c 0d       	add	r16, r12
 162:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 164:	89 91       	ld	r24, Y+
 166:	d9 df       	rcall	.-78     	; 0x11a <i2c_write>
 168:	81 11       	cpse	r24, r1
 16a:	0e c0       	rjmp	.+28     	; 0x188 <i2c_transmit+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	85 e0       	ldi	r24, 0x05	; 5
 16e:	8a 95       	dec	r24
 170:	f1 f7       	brne	.-4      	; 0x16e <i2c_transmit+0x30>
 172:	00 00       	nop

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
 174:	0c 17       	cp	r16, r28
 176:	1d 07       	cpc	r17, r29
 178:	a9 f7       	brne	.-22     	; 0x164 <i2c_transmit+0x26>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 17a:	84 e9       	ldi	r24, 0x94	; 148
 17c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 180:	05 c0       	rjmp	.+10     	; 0x18c <i2c_transmit+0x4e>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
 182:	ff 24       	eor	r15, r15
 184:	f3 94       	inc	r15
 186:	02 c0       	rjmp	.+4      	; 0x18c <i2c_transmit+0x4e>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 188:	ff 24       	eor	r15, r15
 18a:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
 18c:	8f 2d       	mov	r24, r15
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	df 90       	pop	r13
 19a:	cf 90       	pop	r12
 19c:	08 95       	ret

0000019e <write4bit>:
{
	send(data, 0x01);
}

void write4bit(uint8_t data)
{
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	18 2f       	mov	r17, r24
	i2c_transmit(_addr << 1, data | 0x04 | _backlightval, 1);
 1a6:	84 60       	ori	r24, 0x04	; 4
 1a8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 1ac:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 1b0:	68 2b       	or	r22, r24
 1b2:	c2 e0       	ldi	r28, 0x02	; 2
 1b4:	d1 e0       	ldi	r29, 0x01	; 1
 1b6:	88 81       	ld	r24, Y
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	88 0f       	add	r24, r24
 1be:	bf df       	rcall	.-130    	; 0x13e <i2c_transmit>
 1c0:	85 e0       	ldi	r24, 0x05	; 5
 1c2:	8a 95       	dec	r24
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <write4bit+0x24>
 1c6:	00 00       	nop
	_delay_us(1);
	i2c_transmit(_addr << 1, data | ~(0x04) | _backlightval, 1);
 1c8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 1cc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 1d0:	6b 6f       	ori	r22, 0xFB	; 251
 1d2:	7f 6f       	ori	r23, 0xFF	; 255
 1d4:	61 2b       	or	r22, r17
 1d6:	88 81       	ld	r24, Y
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	88 0f       	add	r24, r24
 1de:	af df       	rcall	.-162    	; 0x13e <i2c_transmit>
 1e0:	87 ec       	ldi	r24, 0xC7	; 199
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <write4bit+0x46>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <write4bit+0x4c>
 1ea:	00 00       	nop
	_delay_us(50);
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	08 95       	ret

000001f4 <send>:
	command(0x06);
	command(0x02); _delay_ms(2);
}

void send(uint8_t data, int mode)
{
 1f4:	0f 93       	push	r16
 1f6:	1f 93       	push	r17
 1f8:	cf 93       	push	r28
 1fa:	c8 2f       	mov	r28, r24
 1fc:	8b 01       	movw	r16, r22
	uint8_t highnib = data & 0xF0;
	uint8_t lownib = (data << 4) & 0xF0;
	write4bit((highnib) | mode);
 1fe:	80 7f       	andi	r24, 0xF0	; 240
 200:	9b 01       	movw	r18, r22
 202:	28 2b       	or	r18, r24
 204:	c9 01       	movw	r24, r18
 206:	cb df       	rcall	.-106    	; 0x19e <write4bit>
	write4bit((lownib) | mode);
 208:	30 e1       	ldi	r19, 0x10	; 16
 20a:	c3 9f       	mul	r28, r19
 20c:	c0 01       	movw	r24, r0
 20e:	11 24       	eor	r1, r1
 210:	99 27       	eor	r25, r25
 212:	80 2b       	or	r24, r16
 214:	91 2b       	or	r25, r17
 216:	c3 df       	rcall	.-122    	; 0x19e <write4bit>
}
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <command>:

void command(uint8_t data)
{
	send(data, 0);
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	e7 cf       	rjmp	.-50     	; 0x1f4 <send>
 226:	08 95       	ret

00000228 <write>:
}

void write(uint8_t data)
{
	send(data, 0x01);
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	e3 cf       	rjmp	.-58     	; 0x1f4 <send>
 22e:	08 95       	ret

00000230 <LCD_I2C_begin>:
	_backlightval = 0x08;
}

void LCD_I2C_begin(void)
{
	i2c_init();
 230:	4b df       	rcall	.-362    	; 0xc8 <i2c_init>
	_displayfunction = 0x00;
 232:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <_displayfunction+0x1>
 236:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <_displayfunction>
	if(_rows > 1) {
 23a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 23e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 242:	02 97       	sbiw	r24, 0x02	; 2
 244:	34 f0       	brlt	.+12     	; 0x252 <LCD_I2C_begin+0x22>
		_displayfunction |= 0x08;
 246:	88 e0       	ldi	r24, 0x08	; 8
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_displayfunction+0x1>
 24e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_displayfunction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	2f ef       	ldi	r18, 0xFF	; 255
 254:	80 e7       	ldi	r24, 0x70	; 112
 256:	92 e0       	ldi	r25, 0x02	; 2
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <LCD_I2C_begin+0x28>
 260:	00 c0       	rjmp	.+0      	; 0x262 <LCD_I2C_begin+0x32>
 262:	00 00       	nop
	}
	_delay_ms(50);

	write4bit(0x30);
 264:	80 e3       	ldi	r24, 0x30	; 48
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	9a df       	rcall	.-204    	; 0x19e <write4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	8f e4       	ldi	r24, 0x4F	; 79
 26c:	96 e4       	ldi	r25, 0x46	; 70
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_I2C_begin+0x3e>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_I2C_begin+0x44>
 274:	00 00       	nop
	_delay_us(4500);
	write4bit(0x30);
 276:	80 e3       	ldi	r24, 0x30	; 48
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	91 df       	rcall	.-222    	; 0x19e <write4bit>
 27c:	8f e4       	ldi	r24, 0x4F	; 79
 27e:	96 e4       	ldi	r25, 0x46	; 70
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCD_I2C_begin+0x50>
 284:	00 c0       	rjmp	.+0      	; 0x286 <LCD_I2C_begin+0x56>
	_delay_us(4500);
	write4bit(0x30);
 286:	00 00       	nop
 288:	80 e3       	ldi	r24, 0x30	; 48
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	88 df       	rcall	.-240    	; 0x19e <write4bit>
 28e:	87 e5       	ldi	r24, 0x57	; 87
 290:	92 e0       	ldi	r25, 0x02	; 2
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_I2C_begin+0x62>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_I2C_begin+0x68>
	_delay_us(150);
	write4bit(0x20);
 298:	00 00       	nop
 29a:	80 e2       	ldi	r24, 0x20	; 32
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	7f df       	rcall	.-258    	; 0x19e <write4bit>
	
	command(0x20 | _displayfunction);
 2a0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_displayfunction>
 2a4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_displayfunction+0x1>
 2a8:	80 62       	ori	r24, 0x20	; 32
 2aa:	ba df       	rcall	.-140    	; 0x220 <command>
	_displaycontrol = 0x04;
 2ac:	84 e0       	ldi	r24, 0x04	; 4
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_displaycontrol+0x1>
 2b4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_displaycontrol>
	command(0x08 | _displaycontrol);
 2b8:	8c e0       	ldi	r24, 0x0C	; 12
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	b1 df       	rcall	.-158    	; 0x220 <command>
	command(0x01); _delay_ms(2);
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	ae df       	rcall	.-164    	; 0x220 <command>
 2c4:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c6:	9f e1       	ldi	r25, 0x1F	; 31
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_I2C_begin+0x98>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <LCD_I2C_begin+0x9e>
	command(0x06);
 2ce:	00 00       	nop
 2d0:	86 e0       	ldi	r24, 0x06	; 6
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	a5 df       	rcall	.-182    	; 0x220 <command>
	command(0x02); _delay_ms(2);
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	a2 df       	rcall	.-188    	; 0x220 <command>
 2dc:	8f e3       	ldi	r24, 0x3F	; 63
 2de:	9f e1       	ldi	r25, 0x1F	; 31
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <LCD_I2C_begin+0xb0>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <LCD_I2C_begin+0xb6>
 2e6:	00 00       	nop
 2e8:	08 95       	ret

000002ea <main>:
 2ea:	78 94       	sei
int _backlightval = 0x08;
int _displayfunction, _displaycontrol;

void LCD_I2C_init(int addr, int col, int row)
{
	_addr = addr;
 2ec:	80 e2       	ldi	r24, 0x20	; 32
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_addr+0x1>
 2f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_addr>
	_cols = col;
 2f8:	80 e1       	ldi	r24, 0x10	; 16
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_cols+0x1>
 300:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_cols>
	_rows = row;
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 30c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	_backlightval = 0x08;
 310:	88 e0       	ldi	r24, 0x08	; 8
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 318:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
{
    char buf[40];
	char cnt = 0;
	sei();
	LCD_I2C_init(0x20, 16, 2);
    LCD_I2C_begin();
 31c:	89 df       	rcall	.-238    	; 0x230 <LCD_I2C_begin>
	
	command(0x80);
 31e:	80 e8       	ldi	r24, 0x80	; 128
 320:	7f df       	rcall	.-258    	; 0x220 <command>
	write('c');
 322:	83 e6       	ldi	r24, 0x63	; 99
 324:	81 df       	rcall	.-254    	; 0x228 <write>
 326:	ff cf       	rjmp	.-2      	; 0x326 <main+0x3c>

00000328 <_exit>:
 328:	f8 94       	cli

0000032a <__stop_program>:
 32a:	ff cf       	rjmp	.-2      	; 0x32a <__stop_program>
