
forclass2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  0000046a  000004fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080017a  0080017a  00000578  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014a7  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb2  00000000  00000000  00001b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095e  00000000  00000000  00002849  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  000031a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f3  00000000  00000000  00003448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c3f  00000000  00000000  00003a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000467a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	7a c1       	rjmp	.+756    	; 0x33e <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e6       	ldi	r30, 0x6A	; 106
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 37       	cpi	r26, 0x7A	; 122
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e7       	ldi	r26, 0x7A	; 122
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 38       	cpi	r26, 0x84	; 132
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	d0 c1       	rjmp	.+928    	; 0x466 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include <avr/io.h>
#include "clcd.h"
#include "uart.h"

int main(void)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	67 97       	sbiw	r28, 0x17	; 23
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
    uart0_init();
  dc:	7c d1       	rcall	.+760    	; 0x3d6 <uart0_init>
	i2c_lcd_init();
  de:	40 d0       	rcall	.+128    	; 0x160 <i2c_lcd_init>
  e0:	8c e0       	ldi	r24, 0x0C	; 12

	char str1[] = "Hello world";
  e2:	ed e1       	ldi	r30, 0x1D	; 29
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	de 01       	movw	r26, r28
  e8:	11 96       	adiw	r26, 0x01	; 1
  ea:	01 90       	ld	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	8a 95       	dec	r24
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x22>
  f2:	8b e0       	ldi	r24, 0x0B	; 11
	char str2[] = "ATmega128!";
  f4:	e9 e2       	ldi	r30, 0x29	; 41
  f6:	f1 e0       	ldi	r31, 0x01	; 1
  f8:	de 01       	movw	r26, r28
  fa:	1d 96       	adiw	r26, 0x0d	; 13
  fc:	01 90       	ld	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	8a 95       	dec	r24
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x34>
 104:	ae 01       	movw	r20, r28

	i2c_lcd_string(0, 0, str1);
 106:	4f 5f       	subi	r20, 0xFF	; 255
 108:	5f 4f       	sbci	r21, 0xFF	; 255
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	91 d0       	rcall	.+290    	; 0x232 <i2c_lcd_string>
 110:	ae 01       	movw	r20, r28
	i2c_lcd_string(1, 0, str2);
 112:	43 5f       	subi	r20, 0xF3	; 243
 114:	5f 4f       	sbci	r21, 0xFF	; 255
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	8b d0       	rcall	.+278    	; 0x232 <i2c_lcd_string>
 11c:	ff cf       	rjmp	.-2      	; 0x11c <main+0x54>

0000011e <i2c_lcd_command>:
	i2c_lcd_command(0x01); _delay_ms(2);
	printf("Initialize Ok\r\n");
}

void i2c_lcd_command(uint8_t command)
{
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	00 d0       	rcall	.+0      	; 0x124 <i2c_lcd_command+0x6>
 124:	00 d0       	rcall	.+0      	; 0x126 <i2c_lcd_command+0x8>
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
	uint8_t c_buf[4];
	
	c_buf[0] = (command >> 4) | (0x10);
 12a:	98 2f       	mov	r25, r24
 12c:	92 95       	swap	r25
 12e:	9f 70       	andi	r25, 0x0F	; 15
 130:	29 2f       	mov	r18, r25
 132:	20 61       	ori	r18, 0x10	; 16
 134:	29 83       	std	Y+1, r18	; 0x01
	c_buf[1] = c_buf[0] & 0xEF;
 136:	9a 83       	std	Y+2, r25	; 0x02

	c_buf[2] = (command & 0x0F) | (0x10);
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	8b 83       	std	Y+3, r24	; 0x03
	c_buf[3] = c_buf[2] & 0xEF;
 13e:	8f 7e       	andi	r24, 0xEF	; 239
 140:	8c 83       	std	Y+4, r24	; 0x04

	i2c_transmit(I2C_addr_PCF8574, c_buf, 4);
 142:	44 e0       	ldi	r20, 0x04	; 4
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	be 01       	movw	r22, r28
 148:	6f 5f       	subi	r22, 0xFF	; 255
 14a:	7f 4f       	sbci	r23, 0xFF	; 255
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <I2C_addr_PCF8574>
 150:	ba d0       	rcall	.+372    	; 0x2c6 <i2c_transmit>
}
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <i2c_lcd_init>:

 uint8_t I2C_addr_PCF8574 = (0x27 << 1);

void i2c_lcd_init(void)
{
	printf("Before Connect... \r\n");
 160:	84 e3       	ldi	r24, 0x34	; 52
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	50 d1       	rcall	.+672    	; 0x406 <puts>
	i2c_init();
 166:	74 d0       	rcall	.+232    	; 0x250 <i2c_init>
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <I2C_addr_PCF8574>
	while(!i2c_start(I2C_addr_PCF8574));
 16c:	75 d0       	rcall	.+234    	; 0x258 <i2c_start>
 16e:	88 23       	and	r24, r24
 170:	d9 f3       	breq	.-10     	; 0x168 <i2c_lcd_init+0x8>
	i2c_stop();
 172:	d9 d0       	rcall	.+434    	; 0x326 <i2c_stop>
	printf("Connect Ok\r\n");
 174:	88 e4       	ldi	r24, 0x48	; 72
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	46 d1       	rcall	.+652    	; 0x406 <puts>
 17a:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	80 e7       	ldi	r24, 0x70	; 112
 17e:	92 e0       	ldi	r25, 0x02	; 2
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <i2c_lcd_init+0x20>
 188:	00 c0       	rjmp	.+0      	; 0x18a <i2c_lcd_init+0x2a>
 18a:	00 00       	nop

	_delay_ms(50);


	printf("Before Initialize...\r\n");
 18c:	84 e5       	ldi	r24, 0x54	; 84
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	3a d1       	rcall	.+628    	; 0x406 <puts>
 192:	88 e2       	ldi	r24, 0x28	; 40
	i2c_lcd_command(0x28); _delay_us(50);
 194:	c4 df       	rcall	.-120    	; 0x11e <i2c_lcd_command>
 196:	87 ec       	ldi	r24, 0xC7	; 199
 198:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <i2c_lcd_init+0x3a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <i2c_lcd_init+0x40>
 1a0:	00 00       	nop
 1a2:	8c e0       	ldi	r24, 0x0C	; 12
	i2c_lcd_command(0x0C); _delay_us(50);
 1a4:	bc df       	rcall	.-136    	; 0x11e <i2c_lcd_command>
 1a6:	87 ec       	ldi	r24, 0xC7	; 199
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <i2c_lcd_init+0x4a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <i2c_lcd_init+0x50>
 1b0:	00 00       	nop
 1b2:	86 e0       	ldi	r24, 0x06	; 6
	i2c_lcd_command(0x06); _delay_us(50);
 1b4:	b4 df       	rcall	.-152    	; 0x11e <i2c_lcd_command>
 1b6:	87 ec       	ldi	r24, 0xC7	; 199
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <i2c_lcd_init+0x5a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <i2c_lcd_init+0x60>
 1c0:	00 00       	nop
 1c2:	81 e0       	ldi	r24, 0x01	; 1
	i2c_lcd_command(0x01); _delay_ms(2);
 1c4:	ac df       	rcall	.-168    	; 0x11e <i2c_lcd_command>
 1c6:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	9f e1       	ldi	r25, 0x1F	; 31
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <i2c_lcd_init+0x6a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <i2c_lcd_init+0x70>
 1d0:	00 00       	nop
 1d2:	8a e6       	ldi	r24, 0x6A	; 106
	printf("Initialize Ok\r\n");
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	17 c1       	rjmp	.+558    	; 0x406 <puts>
 1d8:	08 95       	ret

000001da <i2c_lcd_data>:
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29

	i2c_transmit(I2C_addr_PCF8574, c_buf, 4);
}

void i2c_lcd_data(uint8_t data)
{
 1de:	00 d0       	rcall	.+0      	; 0x1e0 <i2c_lcd_data+0x6>
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <i2c_lcd_data+0x8>
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t d_buf[4];
	
	d_buf[0] = (data >> 4) | (0x50);
 1e6:	98 2f       	mov	r25, r24
 1e8:	92 95       	swap	r25
 1ea:	9f 70       	andi	r25, 0x0F	; 15
 1ec:	29 2f       	mov	r18, r25
 1ee:	20 65       	ori	r18, 0x50	; 80
 1f0:	29 83       	std	Y+1, r18	; 0x01
	d_buf[1] = d_buf[0] & 0xEF;
 1f2:	90 64       	ori	r25, 0x40	; 64
 1f4:	9a 83       	std	Y+2, r25	; 0x02

	d_buf[2] = (data & 0x0F) | (0x50);
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	80 65       	ori	r24, 0x50	; 80
 1fa:	8b 83       	std	Y+3, r24	; 0x03
	d_buf[3] = d_buf[2] & 0xEF;
 1fc:	8f 7e       	andi	r24, 0xEF	; 239
 1fe:	8c 83       	std	Y+4, r24	; 0x04

	i2c_transmit(I2C_addr_PCF8574, d_buf, 4);
 200:	44 e0       	ldi	r20, 0x04	; 4
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	be 01       	movw	r22, r28
 206:	6f 5f       	subi	r22, 0xFF	; 255
 208:	7f 4f       	sbci	r23, 0xFF	; 255
 20a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <I2C_addr_PCF8574>
 20e:	5b d0       	rcall	.+182    	; 0x2c6 <i2c_transmit>
}
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <i2c_lcd_goto_XY>:
	col %= 16;

	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;

	i2c_lcd_command(command);
 21e:	81 70       	andi	r24, 0x01	; 1
 220:	6f 70       	andi	r22, 0x0F	; 15
 222:	60 58       	subi	r22, 0x80	; 128
 224:	90 e4       	ldi	r25, 0x40	; 64
 226:	89 9f       	mul	r24, r25
 228:	60 0d       	add	r22, r0
 22a:	11 24       	eor	r1, r1
 22c:	86 2f       	mov	r24, r22
 22e:	77 cf       	rjmp	.-274    	; 0x11e <i2c_lcd_command>
 230:	08 95       	ret

00000232 <i2c_lcd_string>:
}

void i2c_lcd_string(uint8_t row, uint8_t col, char buf[]) 
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	ea 01       	movw	r28, r20
	i2c_lcd_goto_XY(row, col);
 238:	f2 df       	rcall	.-28     	; 0x21e <i2c_lcd_goto_XY>
	for(int i=0; buf[i] != '\0'; i++) {
 23a:	88 81       	ld	r24, Y
 23c:	88 23       	and	r24, r24
 23e:	29 f0       	breq	.+10     	; 0x24a <i2c_lcd_string+0x18>
		i2c_lcd_data(buf[i]);
 240:	21 96       	adiw	r28, 0x01	; 1
 242:	cb df       	rcall	.-106    	; 0x1da <i2c_lcd_data>
}

void i2c_lcd_string(uint8_t row, uint8_t col, char buf[]) 
{
	i2c_lcd_goto_XY(row, col);
	for(int i=0; buf[i] != '\0'; i++) {
 244:	89 91       	ld	r24, Y+
 246:	81 11       	cpse	r24, r1
 248:	fc cf       	rjmp	.-8      	; 0x242 <i2c_lcd_string+0x10>
		i2c_lcd_data(buf[i]);
	}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <i2c_init>:
	// data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 250:	88 e4       	ldi	r24, 0x48	; 72
 252:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 256:	08 95       	ret

00000258 <i2c_start>:
 258:	e4 e7       	ldi	r30, 0x74	; 116
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	10 82       	st	Z, r1
 25e:	94 ea       	ldi	r25, 0xA4	; 164
 260:	90 83       	st	Z, r25
 262:	90 81       	ld	r25, Z
 264:	99 23       	and	r25, r25
 266:	ec f7       	brge	.-6      	; 0x262 <i2c_start+0xa>
 268:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 26c:	98 7f       	andi	r25, 0xF8	; 248
 26e:	98 30       	cpi	r25, 0x08	; 8
 270:	a1 f4       	brne	.+40     	; 0x29a <i2c_start+0x42>
 272:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 276:	84 e8       	ldi	r24, 0x84	; 132
 278:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 27c:	e4 e7       	ldi	r30, 0x74	; 116
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	88 23       	and	r24, r24
 284:	ec f7       	brge	.-6      	; 0x280 <i2c_start+0x28>
 286:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 28a:	98 7f       	andi	r25, 0xF8	; 248
 28c:	98 31       	cpi	r25, 0x18	; 24
 28e:	39 f0       	breq	.+14     	; 0x29e <i2c_start+0x46>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 34       	cpi	r25, 0x40	; 64
 294:	29 f4       	brne	.+10     	; 0x2a0 <i2c_start+0x48>
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	08 95       	ret
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	08 95       	ret

000002a2 <i2c_write>:
 2a2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 2a6:	84 e8       	ldi	r24, 0x84	; 132
 2a8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2ac:	e4 e7       	ldi	r30, 0x74	; 116
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	88 23       	and	r24, r24
 2b4:	ec f7       	brge	.-6      	; 0x2b0 <i2c_write+0xe>
 2b6:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 2ba:	98 7f       	andi	r25, 0xF8	; 248
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	98 32       	cpi	r25, 0x28	; 40
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <i2c_write+0x22>
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	08 95       	ret

000002c6 <i2c_transmit>:
 2c6:	cf 92       	push	r12
 2c8:	df 92       	push	r13
 2ca:	ff 92       	push	r15
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	6b 01       	movw	r12, r22
 2d6:	8a 01       	movw	r16, r20
 2d8:	bf df       	rcall	.-130    	; 0x258 <i2c_start>
 2da:	f8 2e       	mov	r15, r24
 2dc:	81 11       	cpse	r24, r1
 2de:	15 c0       	rjmp	.+42     	; 0x30a <i2c_transmit+0x44>
 2e0:	01 15       	cp	r16, r1
 2e2:	11 05       	cpc	r17, r1
 2e4:	71 f0       	breq	.+28     	; 0x302 <i2c_transmit+0x3c>
 2e6:	e6 01       	movw	r28, r12
 2e8:	0c 0d       	add	r16, r12
 2ea:	1d 1d       	adc	r17, r13
 2ec:	89 91       	ld	r24, Y+
 2ee:	d9 df       	rcall	.-78     	; 0x2a2 <i2c_write>
 2f0:	81 11       	cpse	r24, r1
 2f2:	0e c0       	rjmp	.+28     	; 0x310 <i2c_transmit+0x4a>
 2f4:	85 e0       	ldi	r24, 0x05	; 5
 2f6:	8a 95       	dec	r24
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <i2c_transmit+0x30>
 2fa:	00 00       	nop
 2fc:	0c 17       	cp	r16, r28
 2fe:	1d 07       	cpc	r17, r29
 300:	a9 f7       	brne	.-22     	; 0x2ec <i2c_transmit+0x26>
 302:	84 e9       	ldi	r24, 0x94	; 148
 304:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 308:	05 c0       	rjmp	.+10     	; 0x314 <i2c_transmit+0x4e>
 30a:	ff 24       	eor	r15, r15
 30c:	f3 94       	inc	r15
 30e:	02 c0       	rjmp	.+4      	; 0x314 <i2c_transmit+0x4e>
 310:	ff 24       	eor	r15, r15
 312:	f3 94       	inc	r15
 314:	8f 2d       	mov	r24, r15
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	ff 90       	pop	r15
 320:	df 90       	pop	r13
 322:	cf 90       	pop	r12
 324:	08 95       	ret

00000326 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 326:	84 e9       	ldi	r24, 0x94	; 148
 328:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 32c:	08 95       	ret

0000032e <uart0_trasnmit>:
	 stdin = &INPUT;
	 stdout = &OUTPUT;
 }

 void uart0_trasnmit(char data) {
	 while(!(UCSR0A & (1 << UDRE0)));
 32e:	5d 9b       	sbis	0x0b, 5	; 11
 330:	fe cf       	rjmp	.-4      	; 0x32e <uart0_trasnmit>
	 UDR0 = data;
 332:	8c b9       	out	0x0c, r24	; 12
 334:	08 95       	ret

00000336 <uart0_receive>:
 }

 unsigned char uart0_receive(void) {
	 while(!(UCSR0A & (1 << RXC0)));
 336:	5f 9b       	sbis	0x0b, 7	; 11
 338:	fe cf       	rjmp	.-4      	; 0x336 <uart0_receive>
	 return UDR0;
 33a:	8c b1       	in	r24, 0x0c	; 12
 }
 33c:	08 95       	ret

0000033e <__vector_18>:
FILE INPUT = FDEV_SETUP_STREAM(NULL, uart0_receive, _FDEV_SETUP_READ);

volatile int flag;
volatile int rxdata;

ISR(USART0_RX_vect) {
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	2f 93       	push	r18
 34a:	3f 93       	push	r19
 34c:	4f 93       	push	r20
 34e:	5f 93       	push	r21
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
	unsigned char tmp = UDR0;
 354:	8c b1       	in	r24, 0x0c	; 12
	if(tmp >= '0' && tmp <= '9') {
 356:	90 ed       	ldi	r25, 0xD0	; 208
 358:	98 0f       	add	r25, r24
 35a:	9a 30       	cpi	r25, 0x0A	; 10
 35c:	58 f5       	brcc	.+86     	; 0x3b4 <__vector_18+0x76>
		if(flag) {
 35e:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <__data_end>
 362:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <__data_end+0x1>
 366:	23 2b       	or	r18, r19
 368:	c1 f0       	breq	.+48     	; 0x39a <__vector_18+0x5c>
			rxdata = rxdata * 10 + tmp - '0';
 36a:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <rxdata>
 36e:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <rxdata+0x1>
 372:	a9 01       	movw	r20, r18
 374:	44 0f       	add	r20, r20
 376:	55 1f       	adc	r21, r21
 378:	22 0f       	add	r18, r18
 37a:	33 1f       	adc	r19, r19
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
 380:	22 0f       	add	r18, r18
 382:	33 1f       	adc	r19, r19
 384:	24 0f       	add	r18, r20
 386:	35 1f       	adc	r19, r21
 388:	28 0f       	add	r18, r24
 38a:	31 1d       	adc	r19, r1
 38c:	20 53       	subi	r18, 0x30	; 48
 38e:	31 09       	sbc	r19, r1
 390:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <rxdata+0x1>
 394:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <rxdata>
 398:	13 c0       	rjmp	.+38     	; 0x3c0 <__vector_18+0x82>
		}
		else {
			rxdata = tmp - '0';
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	c0 97       	sbiw	r24, 0x30	; 48
 39e:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <rxdata+0x1>
 3a2:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <rxdata>
			flag = 1;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__data_end+0x1>
 3ae:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end>
 3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <__vector_18+0x82>
		}
	}
	else if(tmp == '\r') {
 3b4:	8d 30       	cpi	r24, 0x0D	; 13
 3b6:	21 f4       	brne	.+8      	; 0x3c0 <__vector_18+0x82>
		flag = 0;
 3b8:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <__data_end+0x1>
 3bc:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <__data_end>
	}
}
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <uart0_init>:

 void uart0_init(void) {
	 UBRR0H = 0x00;
 3d6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	 UBRR0L = 16;
 3da:	80 e1       	ldi	r24, 0x10	; 16
 3dc:	89 b9       	out	0x09, r24	; 9
	 
	 UCSR0A |= (1<<U2X0);
 3de:	59 9a       	sbi	0x0b, 1	; 11
	 UCSR0C |= 0x06;
 3e0:	e5 e9       	ldi	r30, 0x95	; 149
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	86 60       	ori	r24, 0x06	; 6
 3e8:	80 83       	st	Z, r24

	 UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
 3ea:	8a b1       	in	r24, 0x0a	; 10
 3ec:	88 61       	ori	r24, 0x18	; 24
 3ee:	8a b9       	out	0x0a, r24	; 10

	 stdin = &INPUT;
 3f0:	ee e7       	ldi	r30, 0x7E	; 126
 3f2:	f1 e0       	ldi	r31, 0x01	; 1
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	91 83       	std	Z+1, r25	; 0x01
 3fa:	80 83       	st	Z, r24
	 stdout = &OUTPUT;
 3fc:	8f e0       	ldi	r24, 0x0F	; 15
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	93 83       	std	Z+3, r25	; 0x03
 402:	82 83       	std	Z+2, r24	; 0x02
 404:	08 95       	ret

00000406 <puts>:
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <__iob+0x2>
 412:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <__iob+0x3>
 416:	23 81       	ldd	r18, Z+3	; 0x03
 418:	21 ff       	sbrs	r18, 1
 41a:	1b c0       	rjmp	.+54     	; 0x452 <puts+0x4c>
 41c:	8c 01       	movw	r16, r24
 41e:	d0 e0       	ldi	r29, 0x00	; 0
 420:	c0 e0       	ldi	r28, 0x00	; 0
 422:	f8 01       	movw	r30, r16
 424:	81 91       	ld	r24, Z+
 426:	8f 01       	movw	r16, r30
 428:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <__iob+0x2>
 42c:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <__iob+0x3>
 430:	db 01       	movw	r26, r22
 432:	18 96       	adiw	r26, 0x08	; 8
 434:	ed 91       	ld	r30, X+
 436:	fc 91       	ld	r31, X
 438:	19 97       	sbiw	r26, 0x09	; 9
 43a:	88 23       	and	r24, r24
 43c:	31 f0       	breq	.+12     	; 0x44a <puts+0x44>
 43e:	09 95       	icall
 440:	89 2b       	or	r24, r25
 442:	79 f3       	breq	.-34     	; 0x422 <puts+0x1c>
 444:	df ef       	ldi	r29, 0xFF	; 255
 446:	cf ef       	ldi	r28, 0xFF	; 255
 448:	ec cf       	rjmp	.-40     	; 0x422 <puts+0x1c>
 44a:	8a e0       	ldi	r24, 0x0A	; 10
 44c:	09 95       	icall
 44e:	89 2b       	or	r24, r25
 450:	19 f0       	breq	.+6      	; 0x458 <puts+0x52>
 452:	8f ef       	ldi	r24, 0xFF	; 255
 454:	9f ef       	ldi	r25, 0xFF	; 255
 456:	02 c0       	rjmp	.+4      	; 0x45c <puts+0x56>
 458:	8d 2f       	mov	r24, r29
 45a:	9c 2f       	mov	r25, r28
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	08 95       	ret

00000466 <_exit>:
 466:	f8 94       	cli

00000468 <__stop_program>:
 468:	ff cf       	rjmp	.-2      	; 0x468 <__stop_program>
