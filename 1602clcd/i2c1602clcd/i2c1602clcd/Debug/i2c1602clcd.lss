
i2c1602clcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  000004fe  00000592  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080019c  0080019c  0000062e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001645  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c9c  00000000  00000000  00001df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e4  00000000  00000000  00002a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00003478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063b  00000000  00000000  00003738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d35  00000000  00000000  00003d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004aa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	c4 c1       	rjmp	.+904    	; 0x3d2 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ef       	ldi	r30, 0xFE	; 254
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 39       	cpi	r26, 0x9C	; 156
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e9       	ldi	r26, 0x9C	; 156
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 3a       	cpi	r26, 0xA6	; 166
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	1a c2       	rjmp	.+1076   	; 0x4fa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include <avr/io.h>
#include "clcd.h"
#include "uart.h"

int main(void)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	a0 97       	sbiw	r28, 0x20	; 32
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
	uart0_init();
  dc:	c6 d1       	rcall	.+908    	; 0x46a <uart0_init>
	i2c_lcd_init();
  de:	6d d0       	rcall	.+218    	; 0x1ba <i2c_lcd_init>
  e0:	80 e1       	ldi	r24, 0x10	; 16
	
	char str0[16] = "PCF8574 I2C CLCD";
  e2:	ed e1       	ldi	r30, 0x1D	; 29
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	de 01       	movw	r26, r28
  e8:	11 96       	adiw	r26, 0x01	; 1
  ea:	01 90       	ld	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	8a 95       	dec	r24
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x22>
  f2:	8a e0       	ldi	r24, 0x0A	; 10
	char str1[16] = "ATmega128";
  f4:	ee e2       	ldi	r30, 0x2E	; 46
  f6:	f1 e0       	ldi	r31, 0x01	; 1
  f8:	de 01       	movw	r26, r28
  fa:	51 96       	adiw	r26, 0x11	; 17
  fc:	01 90       	ld	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	8a 95       	dec	r24
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x34>
 104:	fe 01       	movw	r30, r28
 106:	7b 96       	adiw	r30, 0x1b	; 27
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	df 01       	movw	r26, r30
 10c:	1d 92       	st	X+, r1
 10e:	8a 95       	dec	r24
 110:	e9 f7       	brne	.-6      	; 0x10c <main+0x44>
 112:	8e e3       	ldi	r24, 0x3E	; 62
	
	printf("Before string transfer....\r\n");
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	c1 d1       	rcall	.+898    	; 0x49a <puts>
 118:	ae 01       	movw	r20, r28
	i2c_lcd_string(0, 0, str0);
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	d3 d0       	rcall	.+422    	; 0x2ca <i2c_lcd_string>
 124:	ae 01       	movw	r20, r28
	i2c_lcd_string(1, 0, str1);
 126:	4f 5e       	subi	r20, 0xEF	; 239
 128:	5f 4f       	sbci	r21, 0xFF	; 255
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	cd d0       	rcall	.+410    	; 0x2ca <i2c_lcd_string>
	printf("string transfer complete....\r\n");	
 130:	8a e5       	ldi	r24, 0x5A	; 90
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	b2 d1       	rcall	.+868    	; 0x49a <puts>
 136:	ff cf       	rjmp	.-2      	; 0x136 <main+0x6e>

00000138 <i2c_lcd_command_8>:
	
	printf("Connect Ok\r\n");	
}

void i2c_lcd_command_8(uint8_t command)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <i2c_lcd_command_8+0x6>
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	uint8_t c_buf[2];
	
	c_buf[0] = (command&0xF0) | RS0_EN1 | BackLight; 
 142:	80 7f       	andi	r24, 0xF0	; 240
 144:	98 2f       	mov	r25, r24
 146:	9c 60       	ori	r25, 0x0C	; 12
 148:	99 83       	std	Y+1, r25	; 0x01
	c_buf[1] = (command&0xF0) | RS0_EN0 | BackLight; 
 14a:	88 60       	ori	r24, 0x08	; 8
 14c:	8a 83       	std	Y+2, r24	; 0x02
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
 14e:	42 e0       	ldi	r20, 0x02	; 2
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	be 01       	movw	r22, r28
 154:	6f 5f       	subi	r22, 0xFF	; 255
 156:	7f 4f       	sbci	r23, 0xFF	; 255
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <I2C_addr_PCF8574>
 15c:	00 d1       	rcall	.+512    	; 0x35e <i2c_transmit>
 15e:	81 11       	cpse	r24, r1
 160:	f6 cf       	rjmp	.-20     	; 0x14e <i2c_lcd_command_8+0x16>
}
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <i2c_lcd_command>:

void i2c_lcd_command(uint8_t command)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	00 d0       	rcall	.+0      	; 0x172 <i2c_lcd_command+0x6>
 172:	00 d0       	rcall	.+0      	; 0x174 <i2c_lcd_command+0x8>
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
	uint8_t c_buf[4];
	
	c_buf[0] = (command &0xF0) | RS0_EN1 | BackLight; 
 178:	98 2f       	mov	r25, r24
 17a:	90 7f       	andi	r25, 0xF0	; 240
 17c:	29 2f       	mov	r18, r25
 17e:	2c 60       	ori	r18, 0x0C	; 12
 180:	29 83       	std	Y+1, r18	; 0x01
	c_buf[1] = (command &0xF0) | RS0_EN0 | BackLight; 
 182:	98 60       	ori	r25, 0x08	; 8
 184:	9a 83       	std	Y+2, r25	; 0x02
	
	c_buf[2] = ((command <<4)&0xF0) | RS0_EN1 | BackLight;
 186:	20 e1       	ldi	r18, 0x10	; 16
 188:	82 9f       	mul	r24, r18
 18a:	c0 01       	movw	r24, r0
 18c:	11 24       	eor	r1, r1
 18e:	98 2f       	mov	r25, r24
 190:	9c 60       	ori	r25, 0x0C	; 12
 192:	9b 83       	std	Y+3, r25	; 0x03
	c_buf[3] = ((command <<4)&0xF0) | RS0_EN0 | BackLight;
 194:	88 60       	ori	r24, 0x08	; 8
 196:	8c 83       	std	Y+4, r24	; 0x04
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
 198:	44 e0       	ldi	r20, 0x04	; 4
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	be 01       	movw	r22, r28
 19e:	6f 5f       	subi	r22, 0xFF	; 255
 1a0:	7f 4f       	sbci	r23, 0xFF	; 255
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <I2C_addr_PCF8574>
 1a6:	db d0       	rcall	.+438    	; 0x35e <i2c_transmit>
 1a8:	81 11       	cpse	r24, r1
 1aa:	f6 cf       	rjmp	.-20     	; 0x198 <i2c_lcd_command+0x2c>
}
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <i2c_lcd_init>:

uint8_t I2C_addr_PCF8574 = (0x27 << 1);
 
void i2c_lcd_init(void)
{
	i2c_init();
 1ba:	96 d0       	rcall	.+300    	; 0x2e8 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	89 e6       	ldi	r24, 0x69	; 105
 1c0:	98 e1       	ldi	r25, 0x18	; 24
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <i2c_lcd_init+0x8>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <i2c_lcd_init+0x12>
 1cc:	00 00       	nop
	_delay_ms(500);

	printf("Before Initialize... \r\n");	
 1ce:	88 e7       	ldi	r24, 0x78	; 120
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	63 d1       	rcall	.+710    	; 0x49a <puts>
	i2c_lcd_command_8(0x30); _delay_ms(5);
 1d4:	80 e3       	ldi	r24, 0x30	; 48
 1d6:	b0 df       	rcall	.-160    	; 0x138 <i2c_lcd_command_8>
 1d8:	8f e1       	ldi	r24, 0x1F	; 31
 1da:	9e e4       	ldi	r25, 0x4E	; 78
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <i2c_lcd_init+0x22>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <i2c_lcd_init+0x28>
 1e2:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
 1e4:	80 e3       	ldi	r24, 0x30	; 48
 1e6:	a8 df       	rcall	.-176    	; 0x138 <i2c_lcd_command_8>
 1e8:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <i2c_lcd_init+0x32>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <i2c_lcd_init+0x38>
 1f2:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
 1f4:	80 e3       	ldi	r24, 0x30	; 48
 1f6:	a0 df       	rcall	.-192    	; 0x138 <i2c_lcd_command_8>
 1f8:	8f e8       	ldi	r24, 0x8F	; 143
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <i2c_lcd_init+0x42>
 200:	00 c0       	rjmp	.+0      	; 0x202 <i2c_lcd_init+0x48>
 202:	00 00       	nop
	i2c_lcd_command_8(0x20); _delay_us(100);
 204:	80 e2       	ldi	r24, 0x20	; 32
 206:	98 df       	rcall	.-208    	; 0x138 <i2c_lcd_command_8>
 208:	8f e8       	ldi	r24, 0x8F	; 143
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <i2c_lcd_init+0x52>
 210:	00 c0       	rjmp	.+0      	; 0x212 <i2c_lcd_init+0x58>
 212:	00 00       	nop
	
	i2c_lcd_command(0x28); _delay_us(50);	
 214:	88 e2       	ldi	r24, 0x28	; 40
 216:	aa df       	rcall	.-172    	; 0x16c <i2c_lcd_command>
 218:	87 ec       	ldi	r24, 0xC7	; 199
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <i2c_lcd_init+0x62>
 220:	00 c0       	rjmp	.+0      	; 0x222 <i2c_lcd_init+0x68>
 222:	00 00       	nop
	i2c_lcd_command(0x08); _delay_us(50);	
 224:	88 e0       	ldi	r24, 0x08	; 8
 226:	a2 df       	rcall	.-188    	; 0x16c <i2c_lcd_command>
 228:	87 ec       	ldi	r24, 0xC7	; 199
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <i2c_lcd_init+0x72>
 230:	00 c0       	rjmp	.+0      	; 0x232 <i2c_lcd_init+0x78>
 232:	00 00       	nop
	i2c_lcd_command(0x01); _delay_ms(3);	 
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	9a df       	rcall	.-204    	; 0x16c <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	8f ed       	ldi	r24, 0xDF	; 223
 23a:	9e e2       	ldi	r25, 0x2E	; 46
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <i2c_lcd_init+0x82>
 240:	00 c0       	rjmp	.+0      	; 0x242 <i2c_lcd_init+0x88>
 242:	00 00       	nop
	i2c_lcd_command(0x06); _delay_us(50);
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	92 df       	rcall	.-220    	; 0x16c <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	87 ec       	ldi	r24, 0xC7	; 199
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <i2c_lcd_init+0x92>
 250:	00 c0       	rjmp	.+0      	; 0x252 <i2c_lcd_init+0x98>
 252:	00 00       	nop
	i2c_lcd_command(0x0C); _delay_us(50);	
 254:	8c e0       	ldi	r24, 0x0C	; 12
 256:	8a df       	rcall	.-236    	; 0x16c <i2c_lcd_command>
 258:	87 ec       	ldi	r24, 0xC7	; 199
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <i2c_lcd_init+0xa2>
 260:	00 c0       	rjmp	.+0      	; 0x262 <i2c_lcd_init+0xa8>
 262:	00 00       	nop
	
	printf("Connect Ok\r\n");	
 264:	8f e8       	ldi	r24, 0x8F	; 143
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	18 c1       	rjmp	.+560    	; 0x49a <puts>
 26a:	08 95       	ret

0000026c <i2c_lcd_data>:
 26c:	cf 93       	push	r28
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
}

void i2c_lcd_data(uint8_t data)
{
 26e:	df 93       	push	r29
 270:	00 d0       	rcall	.+0      	; 0x272 <i2c_lcd_data+0x6>
 272:	00 d0       	rcall	.+0      	; 0x274 <i2c_lcd_data+0x8>
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
	uint8_t d_buf[4];
	
	d_buf[0] = (data &0xF0) | RS1_EN1 | BackLight;
 278:	98 2f       	mov	r25, r24
 27a:	90 7f       	andi	r25, 0xF0	; 240
 27c:	29 2f       	mov	r18, r25
 27e:	2d 60       	ori	r18, 0x0D	; 13
 280:	29 83       	std	Y+1, r18	; 0x01
	d_buf[1] = (data &0xF0) | RS1_EN0 | BackLight;
 282:	99 60       	ori	r25, 0x09	; 9
 284:	9a 83       	std	Y+2, r25	; 0x02
	
	d_buf[2] = ((data <<4)&0xF0) | RS1_EN1 | BackLight;
 286:	20 e1       	ldi	r18, 0x10	; 16
 288:	82 9f       	mul	r24, r18
 28a:	c0 01       	movw	r24, r0
 28c:	11 24       	eor	r1, r1
 28e:	98 2f       	mov	r25, r24
 290:	9d 60       	ori	r25, 0x0D	; 13
 292:	9b 83       	std	Y+3, r25	; 0x03
	d_buf[3] = ((data <<4)&0xF0) | RS1_EN0 | BackLight;
 294:	89 60       	ori	r24, 0x09	; 9
 296:	8c 83       	std	Y+4, r24	; 0x04
	
	while(i2c_transmit(I2C_addr_PCF8574, d_buf, 4));
 298:	44 e0       	ldi	r20, 0x04	; 4
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	be 01       	movw	r22, r28
 29e:	6f 5f       	subi	r22, 0xFF	; 255
 2a0:	7f 4f       	sbci	r23, 0xFF	; 255
 2a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <I2C_addr_PCF8574>
 2a6:	5b d0       	rcall	.+182    	; 0x35e <i2c_transmit>
 2a8:	81 11       	cpse	r24, r1
 2aa:	f6 cf       	rjmp	.-20     	; 0x298 <i2c_lcd_data+0x2c>
}
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <i2c_lcd_goto_XY>:
void i2c_lcd_goto_XY(uint8_t row, uint8_t col)
{
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 | address;
	
	i2c_lcd_command(command);
 2ba:	90 e4       	ldi	r25, 0x40	; 64
 2bc:	89 9f       	mul	r24, r25
 2be:	60 0d       	add	r22, r0
 2c0:	11 24       	eor	r1, r1
 2c2:	86 2f       	mov	r24, r22
 2c4:	80 68       	ori	r24, 0x80	; 128
 2c6:	52 cf       	rjmp	.-348    	; 0x16c <i2c_lcd_command>
 2c8:	08 95       	ret

000002ca <i2c_lcd_string>:
}

void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	ea 01       	movw	r28, r20
	i2c_lcd_goto_XY(row, col);
 2d0:	f4 df       	rcall	.-24     	; 0x2ba <i2c_lcd_goto_XY>
	while(*string) {
 2d2:	88 81       	ld	r24, Y
 2d4:	88 23       	and	r24, r24
 2d6:	29 f0       	breq	.+10     	; 0x2e2 <i2c_lcd_string+0x18>
		i2c_lcd_data(*string++);
 2d8:	21 96       	adiw	r28, 0x01	; 1
 2da:	c8 df       	rcall	.-112    	; 0x26c <i2c_lcd_data>
}

void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
 2dc:	89 91       	ld	r24, Y+
 2de:	81 11       	cpse	r24, r1
 2e0:	fc cf       	rjmp	.-8      	; 0x2da <i2c_lcd_string+0x10>
		i2c_lcd_data(*string++);
	}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
 2e8:	88 e4       	ldi	r24, 0x48	; 72
 2ea:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 2ee:	08 95       	ret

000002f0 <i2c_start>:
 2f0:	e4 e7       	ldi	r30, 0x74	; 116
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	10 82       	st	Z, r1
 2f6:	94 ea       	ldi	r25, 0xA4	; 164
 2f8:	90 83       	st	Z, r25
 2fa:	90 81       	ld	r25, Z
 2fc:	99 23       	and	r25, r25
 2fe:	ec f7       	brge	.-6      	; 0x2fa <i2c_start+0xa>
 300:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 304:	98 7f       	andi	r25, 0xF8	; 248
 306:	98 30       	cpi	r25, 0x08	; 8
 308:	a1 f4       	brne	.+40     	; 0x332 <i2c_start+0x42>
 30a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 30e:	84 e8       	ldi	r24, 0x84	; 132
 310:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 314:	e4 e7       	ldi	r30, 0x74	; 116
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	88 23       	and	r24, r24
 31c:	ec f7       	brge	.-6      	; 0x318 <i2c_start+0x28>
 31e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 322:	98 7f       	andi	r25, 0xF8	; 248
 324:	98 31       	cpi	r25, 0x18	; 24
 326:	39 f0       	breq	.+14     	; 0x336 <i2c_start+0x46>
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 34       	cpi	r25, 0x40	; 64
 32c:	29 f4       	brne	.+10     	; 0x338 <i2c_start+0x48>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	08 95       	ret
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	08 95       	ret
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	08 95       	ret

0000033a <i2c_write>:
 33a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 33e:	84 e8       	ldi	r24, 0x84	; 132
 340:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 344:	e4 e7       	ldi	r30, 0x74	; 116
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	88 23       	and	r24, r24
 34c:	ec f7       	brge	.-6      	; 0x348 <i2c_write+0xe>
 34e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 352:	98 7f       	andi	r25, 0xF8	; 248
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	98 32       	cpi	r25, 0x28	; 40
 358:	09 f4       	brne	.+2      	; 0x35c <i2c_write+0x22>
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	08 95       	ret

0000035e <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
 35e:	cf 92       	push	r12
 360:	df 92       	push	r13
 362:	ff 92       	push	r15
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	6b 01       	movw	r12, r22
 36e:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
 370:	bf df       	rcall	.-130    	; 0x2f0 <i2c_start>
 372:	f8 2e       	mov	r15, r24
 374:	81 11       	cpse	r24, r1
 376:	17 c0       	rjmp	.+46     	; 0x3a6 <i2c_transmit+0x48>
	
	for (uint16_t i = 0; i < length; i++)
 378:	01 15       	cp	r16, r1
 37a:	11 05       	cpc	r17, r1
 37c:	81 f0       	breq	.+32     	; 0x39e <i2c_transmit+0x40>
 37e:	e6 01       	movw	r28, r12
 380:	0c 0d       	add	r16, r12
 382:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 384:	89 91       	ld	r24, Y+
 386:	d9 df       	rcall	.-78     	; 0x33a <i2c_write>
 388:	81 11       	cpse	r24, r1
 38a:	10 c0       	rjmp	.+32     	; 0x3ac <i2c_transmit+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38c:	8f e9       	ldi	r24, 0x9F	; 159
 38e:	9f e0       	ldi	r25, 0x0F	; 15
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <i2c_transmit+0x32>
 394:	00 c0       	rjmp	.+0      	; 0x396 <i2c_transmit+0x38>
 396:	00 00       	nop

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
 398:	0c 17       	cp	r16, r28
 39a:	1d 07       	cpc	r17, r29
 39c:	99 f7       	brne	.-26     	; 0x384 <i2c_transmit+0x26>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 39e:	84 e9       	ldi	r24, 0x94	; 148
 3a0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 3a4:	05 c0       	rjmp	.+10     	; 0x3b0 <i2c_transmit+0x52>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
 3a6:	ff 24       	eor	r15, r15
 3a8:	f3 94       	inc	r15
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 3ac:	ff 24       	eor	r15, r15
 3ae:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
 3b0:	8f 2d       	mov	r24, r15
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	ff 90       	pop	r15
 3bc:	df 90       	pop	r13
 3be:	cf 90       	pop	r12
 3c0:	08 95       	ret

000003c2 <uart0_trasnmit>:
 3c2:	5d 9b       	sbis	0x0b, 5	; 11
 3c4:	fe cf       	rjmp	.-4      	; 0x3c2 <uart0_trasnmit>
 3c6:	8c b9       	out	0x0c, r24	; 12
 3c8:	08 95       	ret

000003ca <uart0_receive>:
 3ca:	5f 9b       	sbis	0x0b, 7	; 11
 3cc:	fe cf       	rjmp	.-4      	; 0x3ca <uart0_receive>
 3ce:	8c b1       	in	r24, 0x0c	; 12
 3d0:	08 95       	ret

000003d2 <__vector_18>:
 3d2:	1f 92       	push	r1
 3d4:	0f 92       	push	r0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	0f 92       	push	r0
 3da:	11 24       	eor	r1, r1
 3dc:	2f 93       	push	r18
 3de:	3f 93       	push	r19
 3e0:	4f 93       	push	r20
 3e2:	5f 93       	push	r21
 3e4:	8f 93       	push	r24
 3e6:	9f 93       	push	r25
 3e8:	8c b1       	in	r24, 0x0c	; 12
 3ea:	90 ed       	ldi	r25, 0xD0	; 208
 3ec:	98 0f       	add	r25, r24
 3ee:	9a 30       	cpi	r25, 0x0A	; 10
 3f0:	58 f5       	brcc	.+86     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 3f2:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <__data_end>
 3f6:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <__data_end+0x1>
 3fa:	23 2b       	or	r18, r19
 3fc:	c1 f0       	breq	.+48     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3fe:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <rxdata>
 402:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <rxdata+0x1>
 406:	a9 01       	movw	r20, r18
 408:	44 0f       	add	r20, r20
 40a:	55 1f       	adc	r21, r21
 40c:	22 0f       	add	r18, r18
 40e:	33 1f       	adc	r19, r19
 410:	22 0f       	add	r18, r18
 412:	33 1f       	adc	r19, r19
 414:	22 0f       	add	r18, r18
 416:	33 1f       	adc	r19, r19
 418:	24 0f       	add	r18, r20
 41a:	35 1f       	adc	r19, r21
 41c:	28 0f       	add	r18, r24
 41e:	31 1d       	adc	r19, r1
 420:	20 53       	subi	r18, 0x30	; 48
 422:	31 09       	sbc	r19, r1
 424:	30 93 9f 01 	sts	0x019F, r19	; 0x80019f <rxdata+0x1>
 428:	20 93 9e 01 	sts	0x019E, r18	; 0x80019e <rxdata>
 42c:	13 c0       	rjmp	.+38     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	c0 97       	sbiw	r24, 0x30	; 48
 432:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <rxdata+0x1>
 436:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <rxdata>
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <__data_end+0x1>
 442:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end>
 446:	06 c0       	rjmp	.+12     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 448:	8d 30       	cpi	r24, 0x0D	; 13
 44a:	21 f4       	brne	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 44c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <__data_end+0x1>
 450:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <__data_end>
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	5f 91       	pop	r21
 45a:	4f 91       	pop	r20
 45c:	3f 91       	pop	r19
 45e:	2f 91       	pop	r18
 460:	0f 90       	pop	r0
 462:	0f be       	out	0x3f, r0	; 63
 464:	0f 90       	pop	r0
 466:	1f 90       	pop	r1
 468:	18 95       	reti

0000046a <uart0_init>:
 46a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 46e:	80 e1       	ldi	r24, 0x10	; 16
 470:	89 b9       	out	0x09, r24	; 9
 472:	59 9a       	sbi	0x0b, 1	; 11
 474:	e5 e9       	ldi	r30, 0x95	; 149
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	86 60       	ori	r24, 0x06	; 6
 47c:	80 83       	st	Z, r24
 47e:	8a b1       	in	r24, 0x0a	; 10
 480:	88 61       	ori	r24, 0x18	; 24
 482:	8a b9       	out	0x0a, r24	; 10
 484:	e0 ea       	ldi	r30, 0xA0	; 160
 486:	f1 e0       	ldi	r31, 0x01	; 1
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	91 83       	std	Z+1, r25	; 0x01
 48e:	80 83       	st	Z, r24
 490:	8f e0       	ldi	r24, 0x0F	; 15
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	93 83       	std	Z+3, r25	; 0x03
 496:	82 83       	std	Z+2, r24	; 0x02
 498:	08 95       	ret

0000049a <puts>:
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <__iob+0x2>
 4a6:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <__iob+0x3>
 4aa:	23 81       	ldd	r18, Z+3	; 0x03
 4ac:	21 ff       	sbrs	r18, 1
 4ae:	1b c0       	rjmp	.+54     	; 0x4e6 <puts+0x4c>
 4b0:	8c 01       	movw	r16, r24
 4b2:	d0 e0       	ldi	r29, 0x00	; 0
 4b4:	c0 e0       	ldi	r28, 0x00	; 0
 4b6:	f8 01       	movw	r30, r16
 4b8:	81 91       	ld	r24, Z+
 4ba:	8f 01       	movw	r16, r30
 4bc:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <__iob+0x2>
 4c0:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <__iob+0x3>
 4c4:	db 01       	movw	r26, r22
 4c6:	18 96       	adiw	r26, 0x08	; 8
 4c8:	ed 91       	ld	r30, X+
 4ca:	fc 91       	ld	r31, X
 4cc:	19 97       	sbiw	r26, 0x09	; 9
 4ce:	88 23       	and	r24, r24
 4d0:	31 f0       	breq	.+12     	; 0x4de <puts+0x44>
 4d2:	09 95       	icall
 4d4:	89 2b       	or	r24, r25
 4d6:	79 f3       	breq	.-34     	; 0x4b6 <puts+0x1c>
 4d8:	df ef       	ldi	r29, 0xFF	; 255
 4da:	cf ef       	ldi	r28, 0xFF	; 255
 4dc:	ec cf       	rjmp	.-40     	; 0x4b6 <puts+0x1c>
 4de:	8a e0       	ldi	r24, 0x0A	; 10
 4e0:	09 95       	icall
 4e2:	89 2b       	or	r24, r25
 4e4:	19 f0       	breq	.+6      	; 0x4ec <puts+0x52>
 4e6:	8f ef       	ldi	r24, 0xFF	; 255
 4e8:	9f ef       	ldi	r25, 0xFF	; 255
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <puts+0x56>
 4ec:	8d 2f       	mov	r24, r29
 4ee:	9c 2f       	mov	r25, r28
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	08 95       	ret

000004fa <_exit>:
 4fa:	f8 94       	cli

000004fc <__stop_program>:
 4fc:	ff cf       	rjmp	.-2      	; 0x4fc <__stop_program>
