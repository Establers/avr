
adc_hw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000226  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000040c  00800124  00800124  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f58  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6c  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000707  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  000026e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000521  00000000  00000000  0000283c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028f  00000000  00000000  00002d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002fec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	88 c0       	rjmp	.+272    	; 0x15a <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e2       	ldi	r30, 0x26	; 38
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	25 e0       	ldi	r18, 0x05	; 5
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 33       	cpi	r26, 0x30	; 48
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	19 d0       	rcall	.+50     	; 0xf6 <main>
  c4:	ae c0       	rjmp	.+348    	; 0x222 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <adc_init>:
#include "adc.h"

int cur_ch;

void adc_init(unsigned char ch) {
	ADMUX |= ch | (1<<REFS0);
  c8:	97 b1       	in	r25, 0x07	; 7
  ca:	90 64       	ori	r25, 0x40	; 64
  cc:	98 2b       	or	r25, r24
  ce:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= ((1 << ADEN) | (1 << ADSC) | (1 << ADFR) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0));
  d0:	96 b1       	in	r25, 0x06	; 6
  d2:	97 6e       	ori	r25, 0xE7	; 231
  d4:	96 b9       	out	0x06, r25	; 6
	cur_ch = ch;
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
  dc:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
  e0:	08 95       	ret

000000e2 <adc_read>:
}

int adc_read(void) {
	while(!(ADCSRA & (1<<ADIF)));
  e2:	34 9b       	sbis	0x06, 4	; 6
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <adc_read>
	// return (ADCH << 8) | ADCL;
	return ADC;
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	95 b1       	in	r25, 0x05	; 5
}
  ea:	08 95       	ret

000000ec <led_init>:
#include "led.h"

unsigned char pattern[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};

void led_init(void) {
	DDRA = 0xff;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	8a bb       	out	0x1a, r24	; 26
  f0:	08 95       	ret

000000f2 <led_on>:
}

void led_on(unsigned char led) {
	PORTA = led;
  f2:	8b bb       	out	0x1b, r24	; 27
  f4:	08 95       	ret

000000f6 <main>:
extern unsigned char pattern[8];
unsigned char adc_led_pattern[1024];

int main(void)
{
	led_init();
  f6:	fa df       	rcall	.-12     	; 0xec <led_init>
	uart0_init();
  f8:	7c d0       	rcall	.+248    	; 0x1f2 <uart0_init>
	adc_init(0x01);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	e5 df       	rcall	.-54     	; 0xc8 <adc_init>
  fe:	a6 e2       	ldi	r26, 0x26	; 38
 100:	b1 e0       	ldi	r27, 0x01	; 1
 102:	20 e0       	ldi	r18, 0x00	; 0
	int adc_read_val;
	
	for(int i=0; i<1024; i++) {
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	c9 01       	movw	r24, r18
		adc_led_pattern[i] = pattern[i/(1024/8)];	
 108:	33 23       	and	r19, r19
 10a:	14 f4       	brge	.+4      	; 0x110 <main+0x1a>
 10c:	81 58       	subi	r24, 0x81	; 129
 10e:	9f 4f       	sbci	r25, 0xFF	; 255
 110:	88 0f       	add	r24, r24
 112:	89 2f       	mov	r24, r25
 114:	88 1f       	adc	r24, r24
 116:	99 0b       	sbc	r25, r25
 118:	fc 01       	movw	r30, r24
 11a:	e0 50       	subi	r30, 0x00	; 0
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	80 81       	ld	r24, Z
 120:	8d 93       	st	X+, r24
 122:	2f 5f       	subi	r18, 0xFF	; 255
	led_init();
	uart0_init();
	adc_init(0x01);
	int adc_read_val;
	
	for(int i=0; i<1024; i++) {
 124:	3f 4f       	sbci	r19, 0xFF	; 255
 126:	21 15       	cp	r18, r1
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	38 07       	cpc	r19, r24
 12c:	61 f7       	brne	.-40     	; 0x106 <main+0x10>
		adc_led_pattern[i] = pattern[i/(1024/8)];	
	}

    while (1) 
    {
		adc_read_val = adc_read();
 12e:	d9 df       	rcall	.-78     	; 0xe2 <adc_read>
 130:	8a 5d       	subi	r24, 0xDA	; 218
		led_on(adc_led_pattern[adc_read_val]);
 132:	9e 4f       	sbci	r25, 0xFE	; 254
 134:	fc 01       	movw	r30, r24
 136:	80 81       	ld	r24, Z
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	db df       	rcall	.-74     	; 0xf2 <led_on>
 13c:	8f e9       	ldi	r24, 0x9F	; 159
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	9f e0       	ldi	r25, 0x0F	; 15
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x4a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x50>
 146:	00 00       	nop
 148:	f2 cf       	rjmp	.-28     	; 0x12e <main+0x38>

0000014a <uart0_trasnmit>:
	 stdin = &INPUT;
	 stdout = &OUTPUT;
 }

 void uart0_trasnmit(char data) {
	 while(!(UCSR0A & (1 << UDRE0)));
 14a:	5d 9b       	sbis	0x0b, 5	; 11
 14c:	fe cf       	rjmp	.-4      	; 0x14a <uart0_trasnmit>
	 UDR0 = data;
 14e:	8c b9       	out	0x0c, r24	; 12
 150:	08 95       	ret

00000152 <uart0_receive>:
 }

 unsigned char uart0_receive(void) {
	 while(!(UCSR0A & (1 << RXC0)));
 152:	5f 9b       	sbis	0x0b, 7	; 11
 154:	fe cf       	rjmp	.-4      	; 0x152 <uart0_receive>
	 return UDR0;
 156:	8c b1       	in	r24, 0x0c	; 12
 }
 158:	08 95       	ret

0000015a <__vector_18>:
FILE INPUT = FDEV_SETUP_STREAM(uart0_receive, NULL, _FDEV_SETUP_READ);

volatile int flag;
volatile int rxdata;

ISR(USART0_RX_vect) {
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	2f 93       	push	r18
 166:	3f 93       	push	r19
 168:	4f 93       	push	r20
 16a:	5f 93       	push	r21
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
	unsigned char tmp = UDR0;
 170:	8c b1       	in	r24, 0x0c	; 12
	if(tmp >= '0' && tmp <= '9') {
 172:	90 ed       	ldi	r25, 0xD0	; 208
 174:	98 0f       	add	r25, r24
 176:	9a 30       	cpi	r25, 0x0A	; 10
 178:	58 f5       	brcc	.+86     	; 0x1d0 <__vector_18+0x76>
		if(flag) {
 17a:	20 91 26 05 	lds	r18, 0x0526	; 0x800526 <flag>
 17e:	30 91 27 05 	lds	r19, 0x0527	; 0x800527 <flag+0x1>
 182:	23 2b       	or	r18, r19
 184:	c1 f0       	breq	.+48     	; 0x1b6 <__vector_18+0x5c>
			rxdata = rxdata * 10 + tmp - '0';
 186:	20 91 28 05 	lds	r18, 0x0528	; 0x800528 <rxdata>
 18a:	30 91 29 05 	lds	r19, 0x0529	; 0x800529 <rxdata+0x1>
 18e:	a9 01       	movw	r20, r18
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	24 0f       	add	r18, r20
 1a2:	35 1f       	adc	r19, r21
 1a4:	28 0f       	add	r18, r24
 1a6:	31 1d       	adc	r19, r1
 1a8:	20 53       	subi	r18, 0x30	; 48
 1aa:	31 09       	sbc	r19, r1
 1ac:	30 93 29 05 	sts	0x0529, r19	; 0x800529 <rxdata+0x1>
 1b0:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <rxdata>
 1b4:	13 c0       	rjmp	.+38     	; 0x1dc <__vector_18+0x82>
		}
		else {
			rxdata = tmp - '0';
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	c0 97       	sbiw	r24, 0x30	; 48
 1ba:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <rxdata+0x1>
 1be:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <rxdata>
			flag = 1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <flag+0x1>
 1ca:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <flag>
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <__vector_18+0x82>
		}
	}
	else if(tmp == '\r') {
 1d0:	8d 30       	cpi	r24, 0x0D	; 13
 1d2:	21 f4       	brne	.+8      	; 0x1dc <__vector_18+0x82>
		flag = 0;
 1d4:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <flag+0x1>
 1d8:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <flag>
	}
}
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <uart0_init>:

 void uart0_init(void) {
	 UBRR0H = 0x00;
 1f2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	 UBRR0L = 16;
 1f6:	80 e1       	ldi	r24, 0x10	; 16
 1f8:	89 b9       	out	0x09, r24	; 9
	 
	 UCSR0A |= (1<<U2X0);
 1fa:	59 9a       	sbi	0x0b, 1	; 11
	 UCSR0C |= 0x06;
 1fc:	e5 e9       	ldi	r30, 0x95	; 149
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	86 60       	ori	r24, 0x06	; 6
 204:	80 83       	st	Z, r24

	 UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
 206:	8a b1       	in	r24, 0x0a	; 10
 208:	88 61       	ori	r24, 0x18	; 24
 20a:	8a b9       	out	0x0a, r24	; 10

	 stdin = &INPUT;
 20c:	ea e2       	ldi	r30, 0x2A	; 42
 20e:	f5 e0       	ldi	r31, 0x05	; 5
 210:	88 e0       	ldi	r24, 0x08	; 8
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	91 83       	std	Z+1, r25	; 0x01
 216:	80 83       	st	Z, r24
	 stdout = &OUTPUT;
 218:	86 e1       	ldi	r24, 0x16	; 22
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	93 83       	std	Z+3, r25	; 0x03
 21e:	82 83       	std	Z+2, r24	; 0x02
 220:	08 95       	ret

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
