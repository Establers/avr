
adc_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000001e4  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080011c  0080011c  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cb5  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a90  00000000  00000000  00001061  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000523  00000000  00000000  00001af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00002014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000510  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f5  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002859  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	67 c0       	rjmp	.+206    	; 0x118 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ee       	ldi	r30, 0xE4	; 228
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e1       	ldi	r26, 0x1C	; 28
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 32       	cpi	r26, 0x28	; 40
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	8d c0       	rjmp	.+282    	; 0x1e0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include "adc.h"
#include "uart.h"

int main(void)
{
    uart0_init();
  c8:	73 d0       	rcall	.+230    	; 0x1b0 <uart0_init>
	adc_init(0x01);
  ca:	81 e0       	ldi	r24, 0x01	; 1
	adc_interrupt_init();
  cc:	0d d0       	rcall	.+26     	; 0xe8 <adc_init>
  ce:	19 d0       	rcall	.+50     	; 0x102 <adc_interrupt_init>
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x8>

000000d2 <__vector_21>:
 * Created: 2019-05-19 오후 3:15:45
 *  Author: yeong
 */ 
#include "adc.h"

ISR(ADC_vect) {
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
	ADCSRA |= (1<<ADIF);
  dc:	34 9a       	sbi	0x06, 4	; 6
}
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <adc_init>:

int cur_ch;

void adc_init(unsigned char ch) {
	ADMUX |= ch | (1<<REFS0);
  e8:	97 b1       	in	r25, 0x07	; 7
  ea:	90 64       	ori	r25, 0x40	; 64
  ec:	98 2b       	or	r25, r24
  ee:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= ((1 << ADEN) | (1 << ADSC) | (1 << ADFR) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0));
  f0:	96 b1       	in	r25, 0x06	; 6
  f2:	97 6e       	ori	r25, 0xE7	; 231
  f4:	96 b9       	out	0x06, r25	; 6
	cur_ch = ch;
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
  fc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
 100:	08 95       	ret

00000102 <adc_interrupt_init>:
}

void adc_interrupt_init(void) {
	ADCSRA |= (1<<ADIE);
 102:	33 9a       	sbi	0x06, 3	; 6
	sei();
 104:	78 94       	sei
 106:	08 95       	ret

00000108 <uart0_trasnmit>:
	 stdin = &INPUT;
	 stdout = &OUTPUT;
 }

 void uart0_trasnmit(char data) {
	 while(!(UCSR0A & (1 << UDRE0)));
 108:	5d 9b       	sbis	0x0b, 5	; 11
 10a:	fe cf       	rjmp	.-4      	; 0x108 <uart0_trasnmit>
	 UDR0 = data;
 10c:	8c b9       	out	0x0c, r24	; 12
 10e:	08 95       	ret

00000110 <uart0_receive>:
 }

 unsigned char uart0_receive(void) {
	 while(!(UCSR0A & (1 << RXC0)));
 110:	5f 9b       	sbis	0x0b, 7	; 11
 112:	fe cf       	rjmp	.-4      	; 0x110 <uart0_receive>
	 return UDR0;
 114:	8c b1       	in	r24, 0x0c	; 12
 }
 116:	08 95       	ret

00000118 <__vector_18>:
FILE INPUT = FDEV_SETUP_STREAM(uart0_receive, NULL, _FDEV_SETUP_READ);

volatile int flag;
volatile int rxdata;

ISR(USART0_RX_vect) {
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	2f 93       	push	r18
 124:	3f 93       	push	r19
 126:	4f 93       	push	r20
 128:	5f 93       	push	r21
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
	unsigned char tmp = UDR0;
 12e:	8c b1       	in	r24, 0x0c	; 12
	if(tmp >= '0' && tmp <= '9') {
 130:	90 ed       	ldi	r25, 0xD0	; 208
 132:	98 0f       	add	r25, r24
 134:	9a 30       	cpi	r25, 0x0A	; 10
 136:	58 f5       	brcc	.+86     	; 0x18e <__vector_18+0x76>
		if(flag) {
 138:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <flag>
 13c:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <flag+0x1>
 140:	23 2b       	or	r18, r19
 142:	c1 f0       	breq	.+48     	; 0x174 <__vector_18+0x5c>
			rxdata = rxdata * 10 + tmp - '0';
 144:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <rxdata>
 148:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <rxdata+0x1>
 14c:	a9 01       	movw	r20, r18
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	22 0f       	add	r18, r18
 154:	33 1f       	adc	r19, r19
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	22 0f       	add	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	24 0f       	add	r18, r20
 160:	35 1f       	adc	r19, r21
 162:	28 0f       	add	r18, r24
 164:	31 1d       	adc	r19, r1
 166:	20 53       	subi	r18, 0x30	; 48
 168:	31 09       	sbc	r19, r1
 16a:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <rxdata+0x1>
 16e:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <rxdata>
 172:	13 c0       	rjmp	.+38     	; 0x19a <__vector_18+0x82>
		}
		else {
			rxdata = tmp - '0';
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	c0 97       	sbiw	r24, 0x30	; 48
 178:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <rxdata+0x1>
 17c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <rxdata>
			flag = 1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <flag+0x1>
 188:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <flag>
 18c:	06 c0       	rjmp	.+12     	; 0x19a <__vector_18+0x82>
		}
	}
	else if(tmp == '\r') {
 18e:	8d 30       	cpi	r24, 0x0D	; 13
 190:	21 f4       	brne	.+8      	; 0x19a <__vector_18+0x82>
		flag = 0;
 192:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <flag+0x1>
 196:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <flag>
	}
}
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	5f 91       	pop	r21
 1a0:	4f 91       	pop	r20
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <uart0_init>:

 void uart0_init(void) {
	 UBRR0H = 0x00;
 1b0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	 UBRR0L = 16;
 1b4:	80 e1       	ldi	r24, 0x10	; 16
 1b6:	89 b9       	out	0x09, r24	; 9
	 
	 UCSR0A |= (1<<U2X0);
 1b8:	59 9a       	sbi	0x0b, 1	; 11
	 UCSR0C |= 0x06;
 1ba:	e5 e9       	ldi	r30, 0x95	; 149
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	86 60       	ori	r24, 0x06	; 6
 1c2:	80 83       	st	Z, r24

	 UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
 1c4:	8a b1       	in	r24, 0x0a	; 10
 1c6:	88 61       	ori	r24, 0x18	; 24
 1c8:	8a b9       	out	0x0a, r24	; 10

	 stdin = &INPUT;
 1ca:	e2 e2       	ldi	r30, 0x22	; 34
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	91 83       	std	Z+1, r25	; 0x01
 1d4:	80 83       	st	Z, r24
	 stdout = &OUTPUT;
 1d6:	8e e0       	ldi	r24, 0x0E	; 14
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	93 83       	std	Z+3, r25	; 0x03
 1dc:	82 83       	std	Z+2, r24	; 0x02
 1de:	08 95       	ret

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
