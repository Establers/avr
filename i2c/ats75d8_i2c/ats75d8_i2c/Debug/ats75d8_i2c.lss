
ats75d8_i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000008f6  0000098a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800126  00800126  000009b0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc5  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b11  00000000  00000000  00001ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000796  00000000  00000000  000025ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a6  00000000  00000000  00002f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ca  00000000  00000000  00003536  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003d00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	30 c1       	rjmp	.+608    	; 0x2aa <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ef       	ldi	r30, 0xF6	; 246
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 33       	cpi	r26, 0x30	; 48
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	16 c4       	rjmp	.+2092   	; 0x8f2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include "uart.h"

#define DEVADDR 0x98

int main(void)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <main+0x6>
  ce:	1f 92       	push	r1
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	uart0_init();
  d4:	36 d1       	rcall	.+620    	; 0x342 <uart0_init>
	DDRD &= ~((1<<PORTD0) | (1<<PORTD1));
  d6:	81 b3       	in	r24, 0x11	; 17
  d8:	8c 7f       	andi	r24, 0xFC	; 252
  da:	81 bb       	out	0x11, r24	; 17
	PORTD |= ((1<<PORTD0) | (1<<PORTD1));
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	83 60       	ori	r24, 0x03	; 3
  e0:	82 bb       	out	0x12, r24	; 18
	SFIOR &= ~(1<<PUD);
  e2:	80 b5       	in	r24, 0x20	; 32
  e4:	8b 7f       	andi	r24, 0xFB	; 251

	i2c_init();
  e6:	80 bd       	out	0x20, r24	; 32
  e8:	30 d0       	rcall	.+96     	; 0x14a <i2c_init>
	uint8_t data = 0x00;
  ea:	19 82       	std	Y+1, r1	; 0x01
	while(i2c_writeReg(DEVADDR, 0x01, &data, 1));
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	ae 01       	movw	r20, r28
  f2:	4f 5f       	subi	r20, 0xFF	; 255
  f4:	5f 4f       	sbci	r21, 0xFF	; 255
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	88 e9       	ldi	r24, 0x98	; 152
  fa:	6d d0       	rcall	.+218    	; 0x1d6 <i2c_writeReg>
  fc:	81 11       	cpse	r24, r1
  fe:	f6 cf       	rjmp	.-20     	; 0xec <main+0x24>
	while (1) 
    {
		uint8_t tempdata[2];
		while(i2c_readReg(DEVADDR, 0x00, &tempdata, 2));
		printf("%d, %d\r\n", tempdata[0], tempdata[1]);
 100:	0c e1       	ldi	r16, 0x1C	; 28
 102:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t data = 0x00;
	while(i2c_writeReg(DEVADDR, 0x01, &data, 1));
	while (1) 
    {
		uint8_t tempdata[2];
		while(i2c_readReg(DEVADDR, 0x00, &tempdata, 2));
 104:	22 e0       	ldi	r18, 0x02	; 2
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	ae 01       	movw	r20, r28
 10a:	4e 5f       	subi	r20, 0xFE	; 254
 10c:	5f 4f       	sbci	r21, 0xFF	; 255
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	88 e9       	ldi	r24, 0x98	; 152
 112:	90 d0       	rcall	.+288    	; 0x234 <i2c_readReg>
 114:	81 11       	cpse	r24, r1
 116:	f6 cf       	rjmp	.-20     	; 0x104 <main+0x3c>
		printf("%d, %d\r\n", tempdata[0], tempdata[1]);
 118:	8b 81       	ldd	r24, Y+3	; 0x03
 11a:	1f 92       	push	r1
 11c:	8f 93       	push	r24
 11e:	8a 81       	ldd	r24, Y+2	; 0x02
 120:	1f 92       	push	r1
 122:	8f 93       	push	r24
 124:	1f 93       	push	r17
 126:	0f 93       	push	r16
 128:	24 d1       	rcall	.+584    	; 0x372 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	85 ea       	ldi	r24, 0xA5	; 165
 12e:	9e e0       	ldi	r25, 0x0E	; 14
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x68>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x72>
 13a:	00 00       	nop
		_delay_ms(300);
    }
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	dd cf       	rjmp	.-70     	; 0x104 <main+0x3c>

0000014a <i2c_init>:
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
 14a:	80 ec       	ldi	r24, 0xC0	; 192
 14c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 150:	08 95       	ret

00000152 <i2c_start>:
 152:	e4 e7       	ldi	r30, 0x74	; 116
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	10 82       	st	Z, r1
 158:	94 ea       	ldi	r25, 0xA4	; 164
 15a:	90 83       	st	Z, r25
 15c:	90 81       	ld	r25, Z
 15e:	99 23       	and	r25, r25
 160:	ec f7       	brge	.-6      	; 0x15c <i2c_start+0xa>
 162:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 166:	98 7f       	andi	r25, 0xF8	; 248
 168:	98 30       	cpi	r25, 0x08	; 8
 16a:	a1 f4       	brne	.+40     	; 0x194 <i2c_start+0x42>
 16c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 170:	84 e8       	ldi	r24, 0x84	; 132
 172:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 176:	e4 e7       	ldi	r30, 0x74	; 116
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	88 23       	and	r24, r24
 17e:	ec f7       	brge	.-6      	; 0x17a <i2c_start+0x28>
 180:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 184:	98 7f       	andi	r25, 0xF8	; 248
 186:	98 31       	cpi	r25, 0x18	; 24
 188:	39 f0       	breq	.+14     	; 0x198 <i2c_start+0x46>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 34       	cpi	r25, 0x40	; 64
 18e:	29 f4       	brne	.+10     	; 0x19a <i2c_start+0x48>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	08 95       	ret
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	08 95       	ret
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	08 95       	ret

0000019c <i2c_write>:
 19c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 1a0:	84 e8       	ldi	r24, 0x84	; 132
 1a2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1a6:	e4 e7       	ldi	r30, 0x74	; 116
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	88 23       	and	r24, r24
 1ae:	ec f7       	brge	.-6      	; 0x1aa <i2c_write+0xe>
 1b0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 1b4:	98 7f       	andi	r25, 0xF8	; 248
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	98 32       	cpi	r25, 0x28	; 40
 1ba:	09 f4       	brne	.+2      	; 0x1be <i2c_write+0x22>
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	08 95       	ret

000001c0 <i2c_read_ack>:
 1c0:	84 ec       	ldi	r24, 0xC4	; 196
 1c2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1c6:	e4 e7       	ldi	r30, 0x74	; 116
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	88 23       	and	r24, r24
 1ce:	ec f7       	brge	.-6      	; 0x1ca <i2c_read_ack+0xa>
 1d0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 1d4:	08 95       	ret

000001d6 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 1d6:	cf 92       	push	r12
 1d8:	df 92       	push	r13
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	c6 2f       	mov	r28, r22
 1e6:	6a 01       	movw	r12, r20
 1e8:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 1ea:	b3 df       	rcall	.-154    	; 0x152 <i2c_start>
 1ec:	f8 2e       	mov	r15, r24
 1ee:	81 11       	cpse	r24, r1
 1f0:	13 c0       	rjmp	.+38     	; 0x218 <i2c_writeReg+0x42>
	i2c_write(regaddr);
 1f2:	8c 2f       	mov	r24, r28
 1f4:	d3 df       	rcall	.-90     	; 0x19c <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 1f6:	01 15       	cp	r16, r1
 1f8:	11 05       	cpc	r17, r1
 1fa:	51 f0       	breq	.+20     	; 0x210 <i2c_writeReg+0x3a>
 1fc:	e6 01       	movw	r28, r12
 1fe:	0c 0d       	add	r16, r12
	{
		if (i2c_write(data[i])) {
 200:	1d 1d       	adc	r17, r13
 202:	89 91       	ld	r24, Y+
 204:	cb df       	rcall	.-106    	; 0x19c <i2c_write>
 206:	81 11       	cpse	r24, r1
 208:	0a c0       	rjmp	.+20     	; 0x21e <i2c_writeReg+0x48>
uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 20a:	c0 17       	cp	r28, r16
 20c:	d1 07       	cpc	r29, r17
 20e:	c9 f7       	brne	.-14     	; 0x202 <i2c_writeReg+0x2c>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 210:	84 e9       	ldi	r24, 0x94	; 148
 212:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 216:	05 c0       	rjmp	.+10     	; 0x222 <i2c_writeReg+0x4c>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 218:	ff 24       	eor	r15, r15
 21a:	f3 94       	inc	r15
 21c:	02 c0       	rjmp	.+4      	; 0x222 <i2c_writeReg+0x4c>
	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) {
			return 1;
 21e:	ff 24       	eor	r15, r15
 220:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 222:	8f 2d       	mov	r24, r15
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	ff 90       	pop	r15
 22e:	df 90       	pop	r13
 230:	cf 90       	pop	r12
 232:	08 95       	ret

00000234 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 234:	cf 92       	push	r12
 236:	df 92       	push	r13
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	c8 2f       	mov	r28, r24
 244:	d6 2f       	mov	r29, r22
 246:	6a 01       	movw	r12, r20
 248:	89 01       	movw	r16, r18
	if (i2c_start(devaddr)) return 1;
 24a:	83 df       	rcall	.-250    	; 0x152 <i2c_start>
 24c:	81 11       	cpse	r24, r1
 24e:	17 c0       	rjmp	.+46     	; 0x27e <i2c_readReg+0x4a>

	i2c_write(regaddr);
 250:	8d 2f       	mov	r24, r29
 252:	a4 df       	rcall	.-184    	; 0x19c <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 254:	8c 2f       	mov	r24, r28
 256:	81 60       	ori	r24, 0x01	; 1
 258:	7c df       	rcall	.-264    	; 0x152 <i2c_start>
 25a:	f8 2e       	mov	r15, r24
 25c:	81 11       	cpse	r24, r1
 25e:	12 c0       	rjmp	.+36     	; 0x284 <i2c_readReg+0x50>

	for (uint16_t i = 0; i < length; i++)
 260:	01 15       	cp	r16, r1
 262:	11 05       	cpc	r17, r1
 264:	41 f0       	breq	.+16     	; 0x276 <i2c_readReg+0x42>
 266:	e6 01       	movw	r28, r12
 268:	0c 0d       	add	r16, r12
	{
		data[i] = i2c_read_ack();
 26a:	1d 1d       	adc	r17, r13
 26c:	a9 df       	rcall	.-174    	; 0x1c0 <i2c_read_ack>
 26e:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < length; i++)
 270:	0c 17       	cp	r16, r28
 272:	1d 07       	cpc	r17, r29
 274:	d9 f7       	brne	.-10     	; 0x26c <i2c_readReg+0x38>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 276:	84 e9       	ldi	r24, 0x94	; 148
 278:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 27c:	05 c0       	rjmp	.+10     	; 0x288 <i2c_readReg+0x54>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 27e:	ff 24       	eor	r15, r15
 280:	f3 94       	inc	r15
 282:	02 c0       	rjmp	.+4      	; 0x288 <i2c_readReg+0x54>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 284:	ff 24       	eor	r15, r15
 286:	f3 94       	inc	r15
	// data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 288:	8f 2d       	mov	r24, r15
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	ff 90       	pop	r15
 294:	df 90       	pop	r13
 296:	cf 90       	pop	r12
 298:	08 95       	ret

0000029a <uart0_trasnmit>:
	 stdin = &INPUT;
	 stdout = &OUTPUT;
 }

 void uart0_trasnmit(char data) {
	 while(!(UCSR0A & (1 << UDRE0)));
 29a:	5d 9b       	sbis	0x0b, 5	; 11
 29c:	fe cf       	rjmp	.-4      	; 0x29a <uart0_trasnmit>
	 UDR0 = data;
 29e:	8c b9       	out	0x0c, r24	; 12
 2a0:	08 95       	ret

000002a2 <uart0_receive>:
 }

 unsigned char uart0_receive(void) {
	 while(!(UCSR0A & (1 << RXC0)));
 2a2:	5f 9b       	sbis	0x0b, 7	; 11
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <uart0_receive>
	 return UDR0;
 2a6:	8c b1       	in	r24, 0x0c	; 12
 }
 2a8:	08 95       	ret

000002aa <__vector_18>:
FILE INPUT = FDEV_SETUP_STREAM(NULL, uart0_receive, _FDEV_SETUP_READ);

volatile int flag;
volatile int rxdata;

ISR(USART0_RX_vect) {
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	8f 93       	push	r24
 2be:	9f 93       	push	r25
	unsigned char tmp = UDR0;
 2c0:	8c b1       	in	r24, 0x0c	; 12
	if(tmp >= '0' && tmp <= '9') {
 2c2:	90 ed       	ldi	r25, 0xD0	; 208
 2c4:	98 0f       	add	r25, r24
 2c6:	9a 30       	cpi	r25, 0x0A	; 10
 2c8:	58 f5       	brcc	.+86     	; 0x320 <__vector_18+0x76>
		if(flag) {
 2ca:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <__data_end>
 2ce:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <__data_end+0x1>
 2d2:	23 2b       	or	r18, r19
 2d4:	c1 f0       	breq	.+48     	; 0x306 <__vector_18+0x5c>
			rxdata = rxdata * 10 + tmp - '0';
 2d6:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <rxdata>
 2da:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <rxdata+0x1>
 2de:	a9 01       	movw	r20, r18
 2e0:	44 0f       	add	r20, r20
 2e2:	55 1f       	adc	r21, r21
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	22 0f       	add	r18, r18
 2ea:	33 1f       	adc	r19, r19
 2ec:	22 0f       	add	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	24 0f       	add	r18, r20
 2f2:	35 1f       	adc	r19, r21
 2f4:	28 0f       	add	r18, r24
 2f6:	31 1d       	adc	r19, r1
 2f8:	20 53       	subi	r18, 0x30	; 48
 2fa:	31 09       	sbc	r19, r1
 2fc:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <rxdata+0x1>
 300:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <rxdata>
 304:	13 c0       	rjmp	.+38     	; 0x32c <__vector_18+0x82>
		}
		else {
			rxdata = tmp - '0';
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	c0 97       	sbiw	r24, 0x30	; 48
 30a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <rxdata+0x1>
 30e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <rxdata>
			flag = 1;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
 31a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
 31e:	06 c0       	rjmp	.+12     	; 0x32c <__vector_18+0x82>
		}
	}
	else if(tmp == '\r') {
 320:	8d 30       	cpi	r24, 0x0D	; 13
 322:	21 f4       	brne	.+8      	; 0x32c <__vector_18+0x82>
		flag = 0;
 324:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <__data_end+0x1>
 328:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
	}
}
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <uart0_init>:

 void uart0_init(void) {
	 UBRR0H = 0x00;
 342:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	 UBRR0L = 16;
 346:	80 e1       	ldi	r24, 0x10	; 16
 348:	89 b9       	out	0x09, r24	; 9
	 
	 UCSR0A |= (1<<U2X0);
 34a:	59 9a       	sbi	0x0b, 1	; 11
	 UCSR0C |= 0x06;
 34c:	e5 e9       	ldi	r30, 0x95	; 149
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	86 60       	ori	r24, 0x06	; 6
 354:	80 83       	st	Z, r24

	 UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
 356:	8a b1       	in	r24, 0x0a	; 10
 358:	88 61       	ori	r24, 0x18	; 24
 35a:	8a b9       	out	0x0a, r24	; 10

	 stdin = &INPUT;
 35c:	ea e2       	ldi	r30, 0x2A	; 42
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	91 83       	std	Z+1, r25	; 0x01
 366:	80 83       	st	Z, r24
	 stdout = &OUTPUT;
 368:	8e e0       	ldi	r24, 0x0E	; 14
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	93 83       	std	Z+3, r25	; 0x03
 36e:	82 83       	std	Z+2, r24	; 0x02
 370:	08 95       	ret

00000372 <printf>:
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
 37a:	ae 01       	movw	r20, r28
 37c:	4b 5f       	subi	r20, 0xFB	; 251
 37e:	5f 4f       	sbci	r21, 0xFF	; 255
 380:	fa 01       	movw	r30, r20
 382:	61 91       	ld	r22, Z+
 384:	71 91       	ld	r23, Z+
 386:	af 01       	movw	r20, r30
 388:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__iob+0x2>
 38c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <__iob+0x3>
 390:	03 d0       	rcall	.+6      	; 0x398 <vfprintf>
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <vfprintf>:
 398:	2f 92       	push	r2
 39a:	3f 92       	push	r3
 39c:	4f 92       	push	r4
 39e:	5f 92       	push	r5
 3a0:	6f 92       	push	r6
 3a2:	7f 92       	push	r7
 3a4:	8f 92       	push	r8
 3a6:	9f 92       	push	r9
 3a8:	af 92       	push	r10
 3aa:	bf 92       	push	r11
 3ac:	cf 92       	push	r12
 3ae:	df 92       	push	r13
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	2b 97       	sbiw	r28, 0x0b	; 11
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	6c 01       	movw	r12, r24
 3ce:	7b 01       	movw	r14, r22
 3d0:	8a 01       	movw	r16, r20
 3d2:	fc 01       	movw	r30, r24
 3d4:	17 82       	std	Z+7, r1	; 0x07
 3d6:	16 82       	std	Z+6, r1	; 0x06
 3d8:	83 81       	ldd	r24, Z+3	; 0x03
 3da:	81 ff       	sbrs	r24, 1
 3dc:	bf c1       	rjmp	.+894    	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 3de:	ce 01       	movw	r24, r28
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	3c 01       	movw	r6, r24
 3e4:	f6 01       	movw	r30, r12
 3e6:	93 81       	ldd	r25, Z+3	; 0x03
 3e8:	f7 01       	movw	r30, r14
 3ea:	93 fd       	sbrc	r25, 3
 3ec:	85 91       	lpm	r24, Z+
 3ee:	93 ff       	sbrs	r25, 3
 3f0:	81 91       	ld	r24, Z+
 3f2:	7f 01       	movw	r14, r30
 3f4:	88 23       	and	r24, r24
 3f6:	09 f4       	brne	.+2      	; 0x3fa <vfprintf+0x62>
 3f8:	ad c1       	rjmp	.+858    	; 0x754 <__LOCK_REGION_LENGTH__+0x354>
 3fa:	85 32       	cpi	r24, 0x25	; 37
 3fc:	39 f4       	brne	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fe:	93 fd       	sbrc	r25, 3
 400:	85 91       	lpm	r24, Z+
 402:	93 ff       	sbrs	r25, 3
 404:	81 91       	ld	r24, Z+
 406:	7f 01       	movw	r14, r30
 408:	85 32       	cpi	r24, 0x25	; 37
 40a:	21 f4       	brne	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40c:	b6 01       	movw	r22, r12
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	d6 d1       	rcall	.+940    	; 0x7be <fputc>
 412:	e8 cf       	rjmp	.-48     	; 0x3e4 <vfprintf+0x4c>
 414:	91 2c       	mov	r9, r1
 416:	21 2c       	mov	r2, r1
 418:	31 2c       	mov	r3, r1
 41a:	ff e1       	ldi	r31, 0x1F	; 31
 41c:	f3 15       	cp	r31, r3
 41e:	d8 f0       	brcs	.+54     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 420:	8b 32       	cpi	r24, 0x2B	; 43
 422:	79 f0       	breq	.+30     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 424:	38 f4       	brcc	.+14     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 426:	80 32       	cpi	r24, 0x20	; 32
 428:	79 f0       	breq	.+30     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 42a:	83 32       	cpi	r24, 0x23	; 35
 42c:	a1 f4       	brne	.+40     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 42e:	23 2d       	mov	r18, r3
 430:	20 61       	ori	r18, 0x10	; 16
 432:	1d c0       	rjmp	.+58     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 434:	8d 32       	cpi	r24, 0x2D	; 45
 436:	61 f0       	breq	.+24     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 438:	80 33       	cpi	r24, 0x30	; 48
 43a:	69 f4       	brne	.+26     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 43c:	23 2d       	mov	r18, r3
 43e:	21 60       	ori	r18, 0x01	; 1
 440:	16 c0       	rjmp	.+44     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 442:	83 2d       	mov	r24, r3
 444:	82 60       	ori	r24, 0x02	; 2
 446:	38 2e       	mov	r3, r24
 448:	e3 2d       	mov	r30, r3
 44a:	e4 60       	ori	r30, 0x04	; 4
 44c:	3e 2e       	mov	r3, r30
 44e:	2a c0       	rjmp	.+84     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 450:	f3 2d       	mov	r31, r3
 452:	f8 60       	ori	r31, 0x08	; 8
 454:	1d c0       	rjmp	.+58     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 456:	37 fc       	sbrc	r3, 7
 458:	2d c0       	rjmp	.+90     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 45a:	20 ed       	ldi	r18, 0xD0	; 208
 45c:	28 0f       	add	r18, r24
 45e:	2a 30       	cpi	r18, 0x0A	; 10
 460:	40 f0       	brcs	.+16     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 462:	8e 32       	cpi	r24, 0x2E	; 46
 464:	b9 f4       	brne	.+46     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 466:	36 fc       	sbrc	r3, 6
 468:	75 c1       	rjmp	.+746    	; 0x754 <__LOCK_REGION_LENGTH__+0x354>
 46a:	23 2d       	mov	r18, r3
 46c:	20 64       	ori	r18, 0x40	; 64
 46e:	32 2e       	mov	r3, r18
 470:	19 c0       	rjmp	.+50     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 472:	36 fe       	sbrs	r3, 6
 474:	06 c0       	rjmp	.+12     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 476:	8a e0       	ldi	r24, 0x0A	; 10
 478:	98 9e       	mul	r9, r24
 47a:	20 0d       	add	r18, r0
 47c:	11 24       	eor	r1, r1
 47e:	92 2e       	mov	r9, r18
 480:	11 c0       	rjmp	.+34     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 482:	ea e0       	ldi	r30, 0x0A	; 10
 484:	2e 9e       	mul	r2, r30
 486:	20 0d       	add	r18, r0
 488:	11 24       	eor	r1, r1
 48a:	22 2e       	mov	r2, r18
 48c:	f3 2d       	mov	r31, r3
 48e:	f0 62       	ori	r31, 0x20	; 32
 490:	3f 2e       	mov	r3, r31
 492:	08 c0       	rjmp	.+16     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 494:	8c 36       	cpi	r24, 0x6C	; 108
 496:	21 f4       	brne	.+8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 498:	83 2d       	mov	r24, r3
 49a:	80 68       	ori	r24, 0x80	; 128
 49c:	38 2e       	mov	r3, r24
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a0:	88 36       	cpi	r24, 0x68	; 104
 4a2:	41 f4       	brne	.+16     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4a4:	f7 01       	movw	r30, r14
 4a6:	93 fd       	sbrc	r25, 3
 4a8:	85 91       	lpm	r24, Z+
 4aa:	93 ff       	sbrs	r25, 3
 4ac:	81 91       	ld	r24, Z+
 4ae:	7f 01       	movw	r14, r30
 4b0:	81 11       	cpse	r24, r1
 4b2:	b3 cf       	rjmp	.-154    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 4b4:	98 2f       	mov	r25, r24
 4b6:	9f 7d       	andi	r25, 0xDF	; 223
 4b8:	95 54       	subi	r25, 0x45	; 69
 4ba:	93 30       	cpi	r25, 0x03	; 3
 4bc:	28 f4       	brcc	.+10     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4be:	0c 5f       	subi	r16, 0xFC	; 252
 4c0:	1f 4f       	sbci	r17, 0xFF	; 255
 4c2:	9f e3       	ldi	r25, 0x3F	; 63
 4c4:	99 83       	std	Y+1, r25	; 0x01
 4c6:	0d c0       	rjmp	.+26     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4c8:	83 36       	cpi	r24, 0x63	; 99
 4ca:	31 f0       	breq	.+12     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4cc:	83 37       	cpi	r24, 0x73	; 115
 4ce:	71 f0       	breq	.+28     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4d0:	83 35       	cpi	r24, 0x53	; 83
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d4:	55 c0       	rjmp	.+170    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 4d6:	20 c0       	rjmp	.+64     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 4d8:	f8 01       	movw	r30, r16
 4da:	80 81       	ld	r24, Z
 4dc:	89 83       	std	Y+1, r24	; 0x01
 4de:	0e 5f       	subi	r16, 0xFE	; 254
 4e0:	1f 4f       	sbci	r17, 0xFF	; 255
 4e2:	88 24       	eor	r8, r8
 4e4:	83 94       	inc	r8
 4e6:	91 2c       	mov	r9, r1
 4e8:	53 01       	movw	r10, r6
 4ea:	12 c0       	rjmp	.+36     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 4ec:	28 01       	movw	r4, r16
 4ee:	f2 e0       	ldi	r31, 0x02	; 2
 4f0:	4f 0e       	add	r4, r31
 4f2:	51 1c       	adc	r5, r1
 4f4:	f8 01       	movw	r30, r16
 4f6:	a0 80       	ld	r10, Z
 4f8:	b1 80       	ldd	r11, Z+1	; 0x01
 4fa:	36 fe       	sbrs	r3, 6
 4fc:	03 c0       	rjmp	.+6      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 4fe:	69 2d       	mov	r22, r9
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 504:	6f ef       	ldi	r22, 0xFF	; 255
 506:	7f ef       	ldi	r23, 0xFF	; 255
 508:	c5 01       	movw	r24, r10
 50a:	4e d1       	rcall	.+668    	; 0x7a8 <strnlen>
 50c:	4c 01       	movw	r8, r24
 50e:	82 01       	movw	r16, r4
 510:	f3 2d       	mov	r31, r3
 512:	ff 77       	andi	r31, 0x7F	; 127
 514:	3f 2e       	mov	r3, r31
 516:	15 c0       	rjmp	.+42     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 518:	28 01       	movw	r4, r16
 51a:	22 e0       	ldi	r18, 0x02	; 2
 51c:	42 0e       	add	r4, r18
 51e:	51 1c       	adc	r5, r1
 520:	f8 01       	movw	r30, r16
 522:	a0 80       	ld	r10, Z
 524:	b1 80       	ldd	r11, Z+1	; 0x01
 526:	36 fe       	sbrs	r3, 6
 528:	03 c0       	rjmp	.+6      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 52a:	69 2d       	mov	r22, r9
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 530:	6f ef       	ldi	r22, 0xFF	; 255
 532:	7f ef       	ldi	r23, 0xFF	; 255
 534:	c5 01       	movw	r24, r10
 536:	2d d1       	rcall	.+602    	; 0x792 <strnlen_P>
 538:	4c 01       	movw	r8, r24
 53a:	f3 2d       	mov	r31, r3
 53c:	f0 68       	ori	r31, 0x80	; 128
 53e:	3f 2e       	mov	r3, r31
 540:	82 01       	movw	r16, r4
 542:	33 fc       	sbrc	r3, 3
 544:	19 c0       	rjmp	.+50     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 546:	82 2d       	mov	r24, r2
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	88 16       	cp	r8, r24
 54c:	99 06       	cpc	r9, r25
 54e:	a0 f4       	brcc	.+40     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 550:	b6 01       	movw	r22, r12
 552:	80 e2       	ldi	r24, 0x20	; 32
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	33 d1       	rcall	.+614    	; 0x7be <fputc>
 558:	2a 94       	dec	r2
 55a:	f5 cf       	rjmp	.-22     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 55c:	f5 01       	movw	r30, r10
 55e:	37 fc       	sbrc	r3, 7
 560:	85 91       	lpm	r24, Z+
 562:	37 fe       	sbrs	r3, 7
 564:	81 91       	ld	r24, Z+
 566:	5f 01       	movw	r10, r30
 568:	b6 01       	movw	r22, r12
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	28 d1       	rcall	.+592    	; 0x7be <fputc>
 56e:	21 10       	cpse	r2, r1
 570:	2a 94       	dec	r2
 572:	21 e0       	ldi	r18, 0x01	; 1
 574:	82 1a       	sub	r8, r18
 576:	91 08       	sbc	r9, r1
 578:	81 14       	cp	r8, r1
 57a:	91 04       	cpc	r9, r1
 57c:	79 f7       	brne	.-34     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 57e:	e1 c0       	rjmp	.+450    	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 580:	84 36       	cpi	r24, 0x64	; 100
 582:	11 f0       	breq	.+4      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 584:	89 36       	cpi	r24, 0x69	; 105
 586:	39 f5       	brne	.+78     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 588:	f8 01       	movw	r30, r16
 58a:	37 fe       	sbrs	r3, 7
 58c:	07 c0       	rjmp	.+14     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 58e:	60 81       	ld	r22, Z
 590:	71 81       	ldd	r23, Z+1	; 0x01
 592:	82 81       	ldd	r24, Z+2	; 0x02
 594:	93 81       	ldd	r25, Z+3	; 0x03
 596:	0c 5f       	subi	r16, 0xFC	; 252
 598:	1f 4f       	sbci	r17, 0xFF	; 255
 59a:	08 c0       	rjmp	.+16     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 59c:	60 81       	ld	r22, Z
 59e:	71 81       	ldd	r23, Z+1	; 0x01
 5a0:	07 2e       	mov	r0, r23
 5a2:	00 0c       	add	r0, r0
 5a4:	88 0b       	sbc	r24, r24
 5a6:	99 0b       	sbc	r25, r25
 5a8:	0e 5f       	subi	r16, 0xFE	; 254
 5aa:	1f 4f       	sbci	r17, 0xFF	; 255
 5ac:	f3 2d       	mov	r31, r3
 5ae:	ff 76       	andi	r31, 0x6F	; 111
 5b0:	3f 2e       	mov	r3, r31
 5b2:	97 ff       	sbrs	r25, 7
 5b4:	09 c0       	rjmp	.+18     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5b6:	90 95       	com	r25
 5b8:	80 95       	com	r24
 5ba:	70 95       	com	r23
 5bc:	61 95       	neg	r22
 5be:	7f 4f       	sbci	r23, 0xFF	; 255
 5c0:	8f 4f       	sbci	r24, 0xFF	; 255
 5c2:	9f 4f       	sbci	r25, 0xFF	; 255
 5c4:	f0 68       	ori	r31, 0x80	; 128
 5c6:	3f 2e       	mov	r3, r31
 5c8:	2a e0       	ldi	r18, 0x0A	; 10
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	a3 01       	movw	r20, r6
 5ce:	33 d1       	rcall	.+614    	; 0x836 <__ultoa_invert>
 5d0:	88 2e       	mov	r8, r24
 5d2:	86 18       	sub	r8, r6
 5d4:	44 c0       	rjmp	.+136    	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 5d6:	85 37       	cpi	r24, 0x75	; 117
 5d8:	31 f4       	brne	.+12     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5da:	23 2d       	mov	r18, r3
 5dc:	2f 7e       	andi	r18, 0xEF	; 239
 5de:	b2 2e       	mov	r11, r18
 5e0:	2a e0       	ldi	r18, 0x0A	; 10
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	25 c0       	rjmp	.+74     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 5e6:	93 2d       	mov	r25, r3
 5e8:	99 7f       	andi	r25, 0xF9	; 249
 5ea:	b9 2e       	mov	r11, r25
 5ec:	8f 36       	cpi	r24, 0x6F	; 111
 5ee:	c1 f0       	breq	.+48     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 5f0:	18 f4       	brcc	.+6      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5f2:	88 35       	cpi	r24, 0x58	; 88
 5f4:	79 f0       	breq	.+30     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 5f6:	ae c0       	rjmp	.+348    	; 0x754 <__LOCK_REGION_LENGTH__+0x354>
 5f8:	80 37       	cpi	r24, 0x70	; 112
 5fa:	19 f0       	breq	.+6      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 5fc:	88 37       	cpi	r24, 0x78	; 120
 5fe:	21 f0       	breq	.+8      	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 600:	a9 c0       	rjmp	.+338    	; 0x754 <__LOCK_REGION_LENGTH__+0x354>
 602:	e9 2f       	mov	r30, r25
 604:	e0 61       	ori	r30, 0x10	; 16
 606:	be 2e       	mov	r11, r30
 608:	b4 fe       	sbrs	r11, 4
 60a:	0d c0       	rjmp	.+26     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 60c:	fb 2d       	mov	r31, r11
 60e:	f4 60       	ori	r31, 0x04	; 4
 610:	bf 2e       	mov	r11, r31
 612:	09 c0       	rjmp	.+18     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 614:	34 fe       	sbrs	r3, 4
 616:	0a c0       	rjmp	.+20     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 618:	29 2f       	mov	r18, r25
 61a:	26 60       	ori	r18, 0x06	; 6
 61c:	b2 2e       	mov	r11, r18
 61e:	06 c0       	rjmp	.+12     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 620:	28 e0       	ldi	r18, 0x08	; 8
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	05 c0       	rjmp	.+10     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 626:	20 e1       	ldi	r18, 0x10	; 16
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 62c:	20 e1       	ldi	r18, 0x10	; 16
 62e:	32 e0       	ldi	r19, 0x02	; 2
 630:	f8 01       	movw	r30, r16
 632:	b7 fe       	sbrs	r11, 7
 634:	07 c0       	rjmp	.+14     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 636:	60 81       	ld	r22, Z
 638:	71 81       	ldd	r23, Z+1	; 0x01
 63a:	82 81       	ldd	r24, Z+2	; 0x02
 63c:	93 81       	ldd	r25, Z+3	; 0x03
 63e:	0c 5f       	subi	r16, 0xFC	; 252
 640:	1f 4f       	sbci	r17, 0xFF	; 255
 642:	06 c0       	rjmp	.+12     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 644:	60 81       	ld	r22, Z
 646:	71 81       	ldd	r23, Z+1	; 0x01
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 5f       	subi	r16, 0xFE	; 254
 64e:	1f 4f       	sbci	r17, 0xFF	; 255
 650:	a3 01       	movw	r20, r6
 652:	f1 d0       	rcall	.+482    	; 0x836 <__ultoa_invert>
 654:	88 2e       	mov	r8, r24
 656:	86 18       	sub	r8, r6
 658:	fb 2d       	mov	r31, r11
 65a:	ff 77       	andi	r31, 0x7F	; 127
 65c:	3f 2e       	mov	r3, r31
 65e:	36 fe       	sbrs	r3, 6
 660:	0d c0       	rjmp	.+26     	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
 662:	23 2d       	mov	r18, r3
 664:	2e 7f       	andi	r18, 0xFE	; 254
 666:	a2 2e       	mov	r10, r18
 668:	89 14       	cp	r8, r9
 66a:	58 f4       	brcc	.+22     	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 66c:	34 fe       	sbrs	r3, 4
 66e:	0b c0       	rjmp	.+22     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 670:	32 fc       	sbrc	r3, 2
 672:	09 c0       	rjmp	.+18     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 674:	83 2d       	mov	r24, r3
 676:	8e 7e       	andi	r24, 0xEE	; 238
 678:	a8 2e       	mov	r10, r24
 67a:	05 c0       	rjmp	.+10     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 67c:	b8 2c       	mov	r11, r8
 67e:	a3 2c       	mov	r10, r3
 680:	03 c0       	rjmp	.+6      	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 682:	b8 2c       	mov	r11, r8
 684:	01 c0       	rjmp	.+2      	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 686:	b9 2c       	mov	r11, r9
 688:	a4 fe       	sbrs	r10, 4
 68a:	0f c0       	rjmp	.+30     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 68c:	fe 01       	movw	r30, r28
 68e:	e8 0d       	add	r30, r8
 690:	f1 1d       	adc	r31, r1
 692:	80 81       	ld	r24, Z
 694:	80 33       	cpi	r24, 0x30	; 48
 696:	21 f4       	brne	.+8      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 698:	9a 2d       	mov	r25, r10
 69a:	99 7e       	andi	r25, 0xE9	; 233
 69c:	a9 2e       	mov	r10, r25
 69e:	09 c0       	rjmp	.+18     	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
 6a0:	a2 fe       	sbrs	r10, 2
 6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
 6a4:	b3 94       	inc	r11
 6a6:	b3 94       	inc	r11
 6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
 6aa:	8a 2d       	mov	r24, r10
 6ac:	86 78       	andi	r24, 0x86	; 134
 6ae:	09 f0       	breq	.+2      	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
 6b0:	b3 94       	inc	r11
 6b2:	a3 fc       	sbrc	r10, 3
 6b4:	10 c0       	rjmp	.+32     	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
 6b6:	a0 fe       	sbrs	r10, 0
 6b8:	06 c0       	rjmp	.+12     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6ba:	b2 14       	cp	r11, r2
 6bc:	80 f4       	brcc	.+32     	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 6be:	28 0c       	add	r2, r8
 6c0:	92 2c       	mov	r9, r2
 6c2:	9b 18       	sub	r9, r11
 6c4:	0d c0       	rjmp	.+26     	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6c6:	b2 14       	cp	r11, r2
 6c8:	58 f4       	brcc	.+22     	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6ca:	b6 01       	movw	r22, r12
 6cc:	80 e2       	ldi	r24, 0x20	; 32
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	76 d0       	rcall	.+236    	; 0x7be <fputc>
 6d2:	b3 94       	inc	r11
 6d4:	f8 cf       	rjmp	.-16     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6d6:	b2 14       	cp	r11, r2
 6d8:	18 f4       	brcc	.+6      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6da:	2b 18       	sub	r2, r11
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6de:	98 2c       	mov	r9, r8
 6e0:	21 2c       	mov	r2, r1
 6e2:	a4 fe       	sbrs	r10, 4
 6e4:	0f c0       	rjmp	.+30     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 6e6:	b6 01       	movw	r22, r12
 6e8:	80 e3       	ldi	r24, 0x30	; 48
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	68 d0       	rcall	.+208    	; 0x7be <fputc>
 6ee:	a2 fe       	sbrs	r10, 2
 6f0:	16 c0       	rjmp	.+44     	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
 6f2:	a1 fc       	sbrc	r10, 1
 6f4:	03 c0       	rjmp	.+6      	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 6f6:	88 e7       	ldi	r24, 0x78	; 120
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 6fc:	88 e5       	ldi	r24, 0x58	; 88
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	b6 01       	movw	r22, r12
 702:	0c c0       	rjmp	.+24     	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
 704:	8a 2d       	mov	r24, r10
 706:	86 78       	andi	r24, 0x86	; 134
 708:	51 f0       	breq	.+20     	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
 70a:	a1 fe       	sbrs	r10, 1
 70c:	02 c0       	rjmp	.+4      	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 70e:	8b e2       	ldi	r24, 0x2B	; 43
 710:	01 c0       	rjmp	.+2      	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
 712:	80 e2       	ldi	r24, 0x20	; 32
 714:	a7 fc       	sbrc	r10, 7
 716:	8d e2       	ldi	r24, 0x2D	; 45
 718:	b6 01       	movw	r22, r12
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	50 d0       	rcall	.+160    	; 0x7be <fputc>
 71e:	89 14       	cp	r8, r9
 720:	30 f4       	brcc	.+12     	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 722:	b6 01       	movw	r22, r12
 724:	80 e3       	ldi	r24, 0x30	; 48
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	4a d0       	rcall	.+148    	; 0x7be <fputc>
 72a:	9a 94       	dec	r9
 72c:	f8 cf       	rjmp	.-16     	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
 72e:	8a 94       	dec	r8
 730:	f3 01       	movw	r30, r6
 732:	e8 0d       	add	r30, r8
 734:	f1 1d       	adc	r31, r1
 736:	80 81       	ld	r24, Z
 738:	b6 01       	movw	r22, r12
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	40 d0       	rcall	.+128    	; 0x7be <fputc>
 73e:	81 10       	cpse	r8, r1
 740:	f6 cf       	rjmp	.-20     	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
 742:	22 20       	and	r2, r2
 744:	09 f4       	brne	.+2      	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
 746:	4e ce       	rjmp	.-868    	; 0x3e4 <vfprintf+0x4c>
 748:	b6 01       	movw	r22, r12
 74a:	80 e2       	ldi	r24, 0x20	; 32
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	37 d0       	rcall	.+110    	; 0x7be <fputc>
 750:	2a 94       	dec	r2
 752:	f7 cf       	rjmp	.-18     	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 754:	f6 01       	movw	r30, r12
 756:	86 81       	ldd	r24, Z+6	; 0x06
 758:	97 81       	ldd	r25, Z+7	; 0x07
 75a:	02 c0       	rjmp	.+4      	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
 75c:	8f ef       	ldi	r24, 0xFF	; 255
 75e:	9f ef       	ldi	r25, 0xFF	; 255
 760:	2b 96       	adiw	r28, 0x0b	; 11
 762:	0f b6       	in	r0, 0x3f	; 63
 764:	f8 94       	cli
 766:	de bf       	out	0x3e, r29	; 62
 768:	0f be       	out	0x3f, r0	; 63
 76a:	cd bf       	out	0x3d, r28	; 61
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	1f 91       	pop	r17
 772:	0f 91       	pop	r16
 774:	ff 90       	pop	r15
 776:	ef 90       	pop	r14
 778:	df 90       	pop	r13
 77a:	cf 90       	pop	r12
 77c:	bf 90       	pop	r11
 77e:	af 90       	pop	r10
 780:	9f 90       	pop	r9
 782:	8f 90       	pop	r8
 784:	7f 90       	pop	r7
 786:	6f 90       	pop	r6
 788:	5f 90       	pop	r5
 78a:	4f 90       	pop	r4
 78c:	3f 90       	pop	r3
 78e:	2f 90       	pop	r2
 790:	08 95       	ret

00000792 <strnlen_P>:
 792:	fc 01       	movw	r30, r24
 794:	05 90       	lpm	r0, Z+
 796:	61 50       	subi	r22, 0x01	; 1
 798:	70 40       	sbci	r23, 0x00	; 0
 79a:	01 10       	cpse	r0, r1
 79c:	d8 f7       	brcc	.-10     	; 0x794 <strnlen_P+0x2>
 79e:	80 95       	com	r24
 7a0:	90 95       	com	r25
 7a2:	8e 0f       	add	r24, r30
 7a4:	9f 1f       	adc	r25, r31
 7a6:	08 95       	ret

000007a8 <strnlen>:
 7a8:	fc 01       	movw	r30, r24
 7aa:	61 50       	subi	r22, 0x01	; 1
 7ac:	70 40       	sbci	r23, 0x00	; 0
 7ae:	01 90       	ld	r0, Z+
 7b0:	01 10       	cpse	r0, r1
 7b2:	d8 f7       	brcc	.-10     	; 0x7aa <strnlen+0x2>
 7b4:	80 95       	com	r24
 7b6:	90 95       	com	r25
 7b8:	8e 0f       	add	r24, r30
 7ba:	9f 1f       	adc	r25, r31
 7bc:	08 95       	ret

000007be <fputc>:
 7be:	0f 93       	push	r16
 7c0:	1f 93       	push	r17
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	fb 01       	movw	r30, r22
 7c8:	23 81       	ldd	r18, Z+3	; 0x03
 7ca:	21 fd       	sbrc	r18, 1
 7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <fputc+0x16>
 7ce:	8f ef       	ldi	r24, 0xFF	; 255
 7d0:	9f ef       	ldi	r25, 0xFF	; 255
 7d2:	2c c0       	rjmp	.+88     	; 0x82c <fputc+0x6e>
 7d4:	22 ff       	sbrs	r18, 2
 7d6:	16 c0       	rjmp	.+44     	; 0x804 <fputc+0x46>
 7d8:	46 81       	ldd	r20, Z+6	; 0x06
 7da:	57 81       	ldd	r21, Z+7	; 0x07
 7dc:	24 81       	ldd	r18, Z+4	; 0x04
 7de:	35 81       	ldd	r19, Z+5	; 0x05
 7e0:	42 17       	cp	r20, r18
 7e2:	53 07       	cpc	r21, r19
 7e4:	44 f4       	brge	.+16     	; 0x7f6 <fputc+0x38>
 7e6:	a0 81       	ld	r26, Z
 7e8:	b1 81       	ldd	r27, Z+1	; 0x01
 7ea:	9d 01       	movw	r18, r26
 7ec:	2f 5f       	subi	r18, 0xFF	; 255
 7ee:	3f 4f       	sbci	r19, 0xFF	; 255
 7f0:	31 83       	std	Z+1, r19	; 0x01
 7f2:	20 83       	st	Z, r18
 7f4:	8c 93       	st	X, r24
 7f6:	26 81       	ldd	r18, Z+6	; 0x06
 7f8:	37 81       	ldd	r19, Z+7	; 0x07
 7fa:	2f 5f       	subi	r18, 0xFF	; 255
 7fc:	3f 4f       	sbci	r19, 0xFF	; 255
 7fe:	37 83       	std	Z+7, r19	; 0x07
 800:	26 83       	std	Z+6, r18	; 0x06
 802:	14 c0       	rjmp	.+40     	; 0x82c <fputc+0x6e>
 804:	8b 01       	movw	r16, r22
 806:	ec 01       	movw	r28, r24
 808:	fb 01       	movw	r30, r22
 80a:	00 84       	ldd	r0, Z+8	; 0x08
 80c:	f1 85       	ldd	r31, Z+9	; 0x09
 80e:	e0 2d       	mov	r30, r0
 810:	09 95       	icall
 812:	89 2b       	or	r24, r25
 814:	e1 f6       	brne	.-72     	; 0x7ce <fputc+0x10>
 816:	d8 01       	movw	r26, r16
 818:	16 96       	adiw	r26, 0x06	; 6
 81a:	8d 91       	ld	r24, X+
 81c:	9c 91       	ld	r25, X
 81e:	17 97       	sbiw	r26, 0x07	; 7
 820:	01 96       	adiw	r24, 0x01	; 1
 822:	17 96       	adiw	r26, 0x07	; 7
 824:	9c 93       	st	X, r25
 826:	8e 93       	st	-X, r24
 828:	16 97       	sbiw	r26, 0x06	; 6
 82a:	ce 01       	movw	r24, r28
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	1f 91       	pop	r17
 832:	0f 91       	pop	r16
 834:	08 95       	ret

00000836 <__ultoa_invert>:
 836:	fa 01       	movw	r30, r20
 838:	aa 27       	eor	r26, r26
 83a:	28 30       	cpi	r18, 0x08	; 8
 83c:	51 f1       	breq	.+84     	; 0x892 <__ultoa_invert+0x5c>
 83e:	20 31       	cpi	r18, 0x10	; 16
 840:	81 f1       	breq	.+96     	; 0x8a2 <__ultoa_invert+0x6c>
 842:	e8 94       	clt
 844:	6f 93       	push	r22
 846:	6e 7f       	andi	r22, 0xFE	; 254
 848:	6e 5f       	subi	r22, 0xFE	; 254
 84a:	7f 4f       	sbci	r23, 0xFF	; 255
 84c:	8f 4f       	sbci	r24, 0xFF	; 255
 84e:	9f 4f       	sbci	r25, 0xFF	; 255
 850:	af 4f       	sbci	r26, 0xFF	; 255
 852:	b1 e0       	ldi	r27, 0x01	; 1
 854:	3e d0       	rcall	.+124    	; 0x8d2 <__ultoa_invert+0x9c>
 856:	b4 e0       	ldi	r27, 0x04	; 4
 858:	3c d0       	rcall	.+120    	; 0x8d2 <__ultoa_invert+0x9c>
 85a:	67 0f       	add	r22, r23
 85c:	78 1f       	adc	r23, r24
 85e:	89 1f       	adc	r24, r25
 860:	9a 1f       	adc	r25, r26
 862:	a1 1d       	adc	r26, r1
 864:	68 0f       	add	r22, r24
 866:	79 1f       	adc	r23, r25
 868:	8a 1f       	adc	r24, r26
 86a:	91 1d       	adc	r25, r1
 86c:	a1 1d       	adc	r26, r1
 86e:	6a 0f       	add	r22, r26
 870:	71 1d       	adc	r23, r1
 872:	81 1d       	adc	r24, r1
 874:	91 1d       	adc	r25, r1
 876:	a1 1d       	adc	r26, r1
 878:	20 d0       	rcall	.+64     	; 0x8ba <__ultoa_invert+0x84>
 87a:	09 f4       	brne	.+2      	; 0x87e <__ultoa_invert+0x48>
 87c:	68 94       	set
 87e:	3f 91       	pop	r19
 880:	2a e0       	ldi	r18, 0x0A	; 10
 882:	26 9f       	mul	r18, r22
 884:	11 24       	eor	r1, r1
 886:	30 19       	sub	r19, r0
 888:	30 5d       	subi	r19, 0xD0	; 208
 88a:	31 93       	st	Z+, r19
 88c:	de f6       	brtc	.-74     	; 0x844 <__ultoa_invert+0xe>
 88e:	cf 01       	movw	r24, r30
 890:	08 95       	ret
 892:	46 2f       	mov	r20, r22
 894:	47 70       	andi	r20, 0x07	; 7
 896:	40 5d       	subi	r20, 0xD0	; 208
 898:	41 93       	st	Z+, r20
 89a:	b3 e0       	ldi	r27, 0x03	; 3
 89c:	0f d0       	rcall	.+30     	; 0x8bc <__ultoa_invert+0x86>
 89e:	c9 f7       	brne	.-14     	; 0x892 <__ultoa_invert+0x5c>
 8a0:	f6 cf       	rjmp	.-20     	; 0x88e <__ultoa_invert+0x58>
 8a2:	46 2f       	mov	r20, r22
 8a4:	4f 70       	andi	r20, 0x0F	; 15
 8a6:	40 5d       	subi	r20, 0xD0	; 208
 8a8:	4a 33       	cpi	r20, 0x3A	; 58
 8aa:	18 f0       	brcs	.+6      	; 0x8b2 <__ultoa_invert+0x7c>
 8ac:	49 5d       	subi	r20, 0xD9	; 217
 8ae:	31 fd       	sbrc	r19, 1
 8b0:	40 52       	subi	r20, 0x20	; 32
 8b2:	41 93       	st	Z+, r20
 8b4:	02 d0       	rcall	.+4      	; 0x8ba <__ultoa_invert+0x84>
 8b6:	a9 f7       	brne	.-22     	; 0x8a2 <__ultoa_invert+0x6c>
 8b8:	ea cf       	rjmp	.-44     	; 0x88e <__ultoa_invert+0x58>
 8ba:	b4 e0       	ldi	r27, 0x04	; 4
 8bc:	a6 95       	lsr	r26
 8be:	97 95       	ror	r25
 8c0:	87 95       	ror	r24
 8c2:	77 95       	ror	r23
 8c4:	67 95       	ror	r22
 8c6:	ba 95       	dec	r27
 8c8:	c9 f7       	brne	.-14     	; 0x8bc <__ultoa_invert+0x86>
 8ca:	00 97       	sbiw	r24, 0x00	; 0
 8cc:	61 05       	cpc	r22, r1
 8ce:	71 05       	cpc	r23, r1
 8d0:	08 95       	ret
 8d2:	9b 01       	movw	r18, r22
 8d4:	ac 01       	movw	r20, r24
 8d6:	0a 2e       	mov	r0, r26
 8d8:	06 94       	lsr	r0
 8da:	57 95       	ror	r21
 8dc:	47 95       	ror	r20
 8de:	37 95       	ror	r19
 8e0:	27 95       	ror	r18
 8e2:	ba 95       	dec	r27
 8e4:	c9 f7       	brne	.-14     	; 0x8d8 <__ultoa_invert+0xa2>
 8e6:	62 0f       	add	r22, r18
 8e8:	73 1f       	adc	r23, r19
 8ea:	84 1f       	adc	r24, r20
 8ec:	95 1f       	adc	r25, r21
 8ee:	a0 1d       	adc	r26, r0
 8f0:	08 95       	ret

000008f2 <_exit>:
 8f2:	f8 94       	cli

000008f4 <__stop_program>:
 8f4:	ff cf       	rjmp	.-2      	; 0x8f4 <__stop_program>
