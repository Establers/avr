
forclass.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000003a8  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800130  00800130  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f5c  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad4  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000680  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002624  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f0  00000000  00000000  00002788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000448  00000000  00000000  00002c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000030c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	7a c0       	rjmp	.+244    	; 0x10a <__vector_5>
  16:	00 00       	nop
  18:	a9 c0       	rjmp	.+338    	; 0x16c <__vector_6>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	12 c1       	rjmp	.+548    	; 0x26e <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 33       	cpi	r26, 0x30	; 48
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e3       	ldi	r26, 0x30	; 48
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 34       	cpi	r26, 0x46	; 70
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	6f c1       	rjmp	.+734    	; 0x3a4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:

extern FILE OUTPUT;
extern FILE INPUT;

int main(void) {	
	stdin = &INPUT;
  c8:	84 e1       	ldi	r24, 0x14	; 20
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__iob+0x1>
  d0:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__iob>
	stdout = &OUTPUT;
  d4:	82 e2       	ldi	r24, 0x22	; 34
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__iob+0x3>
  dc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__iob+0x2>
	uart0_init();
  e0:	2c d1       	rcall	.+600    	; 0x33a <uart0_init>

	DDRA = 0xff;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
  e6:	84 bb       	out	0x14, r24	; 20
	DDRG |= 0x0f;
  e8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
  ec:	8f 60       	ori	r24, 0x0F	; 15
  ee:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	PORTE |= ((1<<4) | (1<<5));
  f2:	83 b1       	in	r24, 0x03	; 3
  f4:	80 63       	ori	r24, 0x30	; 48
  f6:	83 b9       	out	0x03, r24	; 3
	EIMSK |= ((1<<4) | (1<<5));
  f8:	89 b7       	in	r24, 0x39	; 57
  fa:	80 63       	ori	r24, 0x30	; 48
  fc:	89 bf       	out	0x39, r24	; 57
	EICRB |= ((1<<ISC41) | (1<<ISC51));
  fe:	8a b7       	in	r24, 0x3a	; 58
 100:	8a 60       	ori	r24, 0x0A	; 10
 102:	8a bf       	out	0x3a, r24	; 58

	while(1) {
		// solution1();
		// solution2();
		// solution3();
		 solution4();
 104:	78 94       	sei
 106:	63 d0       	rcall	.+198    	; 0x1ce <solution4>
 108:	fe cf       	rjmp	.-4      	; 0x106 <main+0x3e>

0000010a <__vector_5>:
	for(int i=0; i<4; i++) {
		PORTG = fnd_sel[i];
		PORTC = num[fnd_num[i]];
		_delay_ms(2);
	}
 }
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	8f e3       	ldi	r24, 0x3F	; 63
 11a:	9c e9       	ldi	r25, 0x9C	; 156
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <__vector_5+0x12>
 120:	00 c0       	rjmp	.+0      	; 0x122 <__vector_5+0x18>
 122:	00 00       	nop
 124:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 128:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
 12c:	02 97       	sbiw	r24, 0x02	; 2
 12e:	31 f4       	brne	.+12     	; 0x13c <__vector_5+0x32>
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
 144:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 148:	0c 9b       	sbis	0x01, 4	; 1
 14a:	fe cf       	rjmp	.-4      	; 0x148 <__vector_5+0x3e>
 14c:	8f e3       	ldi	r24, 0x3F	; 63
 14e:	9c e9       	ldi	r25, 0x9C	; 156
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <__vector_5+0x46>
 154:	00 c0       	rjmp	.+0      	; 0x156 <__vector_5+0x4c>
 156:	00 00       	nop
 158:	88 b7       	in	r24, 0x38	; 56
 15a:	80 61       	ori	r24, 0x10	; 16
 15c:	88 bf       	out	0x38, r24	; 56
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <__vector_6>:
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	8f e3       	ldi	r24, 0x3F	; 63
 17c:	9c e9       	ldi	r25, 0x9C	; 156
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <__vector_6+0x12>
 182:	00 c0       	rjmp	.+0      	; 0x184 <__vector_6+0x18>
 184:	00 00       	nop
 186:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 18a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	31 f4       	brne	.+12     	; 0x19e <__vector_6+0x32>
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	9f ef       	ldi	r25, 0xFF	; 255
 196:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 19a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
 1a6:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 1aa:	0d 9b       	sbis	0x01, 5	; 1
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <__vector_6+0x3e>
 1ae:	8f e3       	ldi	r24, 0x3F	; 63
 1b0:	9c e9       	ldi	r25, 0x9C	; 156
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <__vector_6+0x46>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <__vector_6+0x4c>
 1b8:	00 00       	nop
 1ba:	88 b7       	in	r24, 0x38	; 56
 1bc:	80 62       	ori	r24, 0x20	; 32
 1be:	88 bf       	out	0x38, r24	; 56
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <solution4>:
		PORTC = num[fnd_num[i]];
		_delay_ms(2);
	}
}
*/
void solution4(void) {
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
	fnd_num[3] = (rxdata/1000)%10;
 1d2:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <rxdata>
 1d6:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <rxdata+0x1>
 1da:	cf 01       	movw	r24, r30
 1dc:	68 ee       	ldi	r22, 0xE8	; 232
 1de:	73 e0       	ldi	r23, 0x03	; 3
 1e0:	ba d0       	rcall	.+372    	; 0x356 <__divmodhi4>
 1e2:	cb 01       	movw	r24, r22
 1e4:	2a e0       	ldi	r18, 0x0A	; 10
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	b9 01       	movw	r22, r18
 1ea:	b5 d0       	rcall	.+362    	; 0x356 <__divmodhi4>
 1ec:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <fnd_num+0x7>
 1f0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <fnd_num+0x6>
	fnd_num[2] = (rxdata/100)%10;
 1f4:	cf 01       	movw	r24, r30
 1f6:	64 e6       	ldi	r22, 0x64	; 100
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	ad d0       	rcall	.+346    	; 0x356 <__divmodhi4>
 1fc:	cb 01       	movw	r24, r22
 1fe:	b9 01       	movw	r22, r18
 200:	aa d0       	rcall	.+340    	; 0x356 <__divmodhi4>
 202:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <fnd_num+0x5>
 206:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <fnd_num+0x4>
	fnd_num[1] = (rxdata/10)%10;
 20a:	cf 01       	movw	r24, r30
 20c:	b9 01       	movw	r22, r18
 20e:	a3 d0       	rcall	.+326    	; 0x356 <__divmodhi4>
 210:	fc 01       	movw	r30, r24
 212:	cb 01       	movw	r24, r22
 214:	b9 01       	movw	r22, r18
 216:	9f d0       	rcall	.+318    	; 0x356 <__divmodhi4>
 218:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <fnd_num+0x3>
 21c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <fnd_num+0x2>
 220:	f0 93 33 01 	sts	0x0133, r31	; 0x800133 <fnd_num+0x1>
	fnd_num[0] = (rxdata/1)%10;
 224:	e0 93 32 01 	sts	0x0132, r30	; 0x800132 <fnd_num>
 228:	e2 e0       	ldi	r30, 0x02	; 2
 22a:	f1 e0       	ldi	r31, 0x01	; 1
 22c:	c2 e3       	ldi	r28, 0x32	; 50
 22e:	d1 e0       	ldi	r29, 0x01	; 1
 230:	80 81       	ld	r24, Z

	for(int i=0; i<4; i++) {
		PORTG = fnd_sel[i];
 232:	32 96       	adiw	r30, 0x02	; 2
 234:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 238:	a9 91       	ld	r26, Y+
		PORTC = num[fnd_num[i]];
 23a:	b9 91       	ld	r27, Y+
 23c:	a6 5f       	subi	r26, 0xF6	; 246
 23e:	be 4f       	sbci	r27, 0xFE	; 254
 240:	8c 91       	ld	r24, X
 242:	85 bb       	out	0x15, r24	; 21
 244:	8f e3       	ldi	r24, 0x3F	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	9f e1       	ldi	r25, 0x1F	; 31
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <solution4+0x7a>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <solution4+0x80>
 24e:	00 00       	nop
 250:	91 e0       	ldi	r25, 0x01	; 1
	fnd_num[3] = (rxdata/1000)%10;
	fnd_num[2] = (rxdata/100)%10;
	fnd_num[1] = (rxdata/10)%10;
	fnd_num[0] = (rxdata/1)%10;

	for(int i=0; i<4; i++) {
 252:	ea 30       	cpi	r30, 0x0A	; 10
 254:	f9 07       	cpc	r31, r25
 256:	61 f7       	brne	.-40     	; 0x230 <solution4+0x62>
 258:	df 91       	pop	r29
		PORTG = fnd_sel[i];
		PORTC = num[fnd_num[i]];
		_delay_ms(2);
	}
}
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <uart0_trasnmit>:

	UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
}

void uart0_trasnmit(char data) {
	while(!(UCSR0A & (1 << UDRE0)));
 25e:	5d 9b       	sbis	0x0b, 5	; 11
 260:	fe cf       	rjmp	.-4      	; 0x25e <uart0_trasnmit>
	UDR0 = data;
 262:	8c b9       	out	0x0c, r24	; 12
 264:	08 95       	ret

00000266 <uart0_receive>:
}

unsigned char uart0_receive(void) {
	while(!(UCSR0A & (1 << RXC0)));
 266:	5f 9b       	sbis	0x0b, 7	; 11
 268:	fe cf       	rjmp	.-4      	; 0x266 <uart0_receive>
	return UDR0;
 26a:	8c b1       	in	r24, 0x0c	; 12
 26c:	08 95       	ret

0000026e <__vector_18>:

volatile int rxdata;
volatile int tmpdata;
volatile int flag;

ISR(USART0_RX_vect) {
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	0b b6       	in	r0, 0x3b	; 59
 27a:	0f 92       	push	r0
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	4f 93       	push	r20
 282:	5f 93       	push	r21
 284:	6f 93       	push	r22
 286:	7f 93       	push	r23
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
	char tmp = UDR0;
 294:	2c b1       	in	r18, 0x0c	; 12
	if(tmp >= '0' && tmp <= '9') {
 296:	80 ed       	ldi	r24, 0xD0	; 208
 298:	82 0f       	add	r24, r18
 29a:	8a 30       	cpi	r24, 0x0A	; 10
 29c:	68 f5       	brcc	.+90     	; 0x2f8 <__vector_18+0x8a>
		if(flag == 1) {
 29e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <flag>
 2a2:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <flag+0x1>
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	c9 f4       	brne	.+50     	; 0x2de <__vector_18+0x70>
			tmpdata = ((tmpdata * 10) % 10000 + (tmp - '0') % 10000) % 10000;
 2ac:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <tmpdata>
 2b0:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <tmpdata+0x1>
 2b4:	6a e0       	ldi	r22, 0x0A	; 10
 2b6:	64 9f       	mul	r22, r20
 2b8:	c0 01       	movw	r24, r0
 2ba:	65 9f       	mul	r22, r21
 2bc:	90 0d       	add	r25, r0
 2be:	11 24       	eor	r1, r1
 2c0:	e0 e1       	ldi	r30, 0x10	; 16
 2c2:	f7 e2       	ldi	r31, 0x27	; 39
 2c4:	bf 01       	movw	r22, r30
 2c6:	47 d0       	rcall	.+142    	; 0x356 <__divmodhi4>
 2c8:	20 53       	subi	r18, 0x30	; 48
 2ca:	31 09       	sbc	r19, r1
 2cc:	82 0f       	add	r24, r18
 2ce:	93 1f       	adc	r25, r19
 2d0:	bf 01       	movw	r22, r30
 2d2:	41 d0       	rcall	.+130    	; 0x356 <__divmodhi4>
 2d4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <tmpdata+0x1>
 2d8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <tmpdata>
 2dc:	1b c0       	rjmp	.+54     	; 0x314 <__vector_18+0xa6>
		}
		else {
			tmpdata = tmp - '0';
 2de:	20 53       	subi	r18, 0x30	; 48
 2e0:	31 09       	sbc	r19, r1
 2e2:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <tmpdata+0x1>
 2e6:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <tmpdata>
			flag = 1;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <flag+0x1>
 2f2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <flag>
 2f6:	0e c0       	rjmp	.+28     	; 0x314 <__vector_18+0xa6>
		}
	}
	else if(tmp == '\r'){
 2f8:	2d 30       	cpi	r18, 0x0D	; 13
 2fa:	61 f4       	brne	.+24     	; 0x314 <__vector_18+0xa6>
		flag = 0;
 2fc:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <flag+0x1>
 300:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <flag>
		rxdata = tmpdata;
 304:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <tmpdata>
 308:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <tmpdata+0x1>
 30c:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <rxdata+0x1>
 310:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <rxdata>
	}
}
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	bf 91       	pop	r27
 31a:	af 91       	pop	r26
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	7f 91       	pop	r23
 322:	6f 91       	pop	r22
 324:	5f 91       	pop	r21
 326:	4f 91       	pop	r20
 328:	3f 91       	pop	r19
 32a:	2f 91       	pop	r18
 32c:	0f 90       	pop	r0
 32e:	0b be       	out	0x3b, r0	; 59
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <uart0_init>:

void uart0_init(void) {
	UBRR0H = 0x00;
 33a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 16;
 33e:	80 e1       	ldi	r24, 0x10	; 16
 340:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A |= (1<<U2X0);
 342:	59 9a       	sbi	0x0b, 1	; 11
	UCSR0C |= 0x06;
 344:	e5 e9       	ldi	r30, 0x95	; 149
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	86 60       	ori	r24, 0x06	; 6
 34c:	80 83       	st	Z, r24

	UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
 34e:	8a b1       	in	r24, 0x0a	; 10
 350:	88 69       	ori	r24, 0x98	; 152
 352:	8a b9       	out	0x0a, r24	; 10
 354:	08 95       	ret

00000356 <__divmodhi4>:
 356:	97 fb       	bst	r25, 7
 358:	07 2e       	mov	r0, r23
 35a:	16 f4       	brtc	.+4      	; 0x360 <__divmodhi4+0xa>
 35c:	00 94       	com	r0
 35e:	06 d0       	rcall	.+12     	; 0x36c <__divmodhi4_neg1>
 360:	77 fd       	sbrc	r23, 7
 362:	08 d0       	rcall	.+16     	; 0x374 <__divmodhi4_neg2>
 364:	0b d0       	rcall	.+22     	; 0x37c <__udivmodhi4>
 366:	07 fc       	sbrc	r0, 7
 368:	05 d0       	rcall	.+10     	; 0x374 <__divmodhi4_neg2>
 36a:	3e f4       	brtc	.+14     	; 0x37a <__divmodhi4_exit>

0000036c <__divmodhi4_neg1>:
 36c:	90 95       	com	r25
 36e:	81 95       	neg	r24
 370:	9f 4f       	sbci	r25, 0xFF	; 255
 372:	08 95       	ret

00000374 <__divmodhi4_neg2>:
 374:	70 95       	com	r23
 376:	61 95       	neg	r22
 378:	7f 4f       	sbci	r23, 0xFF	; 255

0000037a <__divmodhi4_exit>:
 37a:	08 95       	ret

0000037c <__udivmodhi4>:
 37c:	aa 1b       	sub	r26, r26
 37e:	bb 1b       	sub	r27, r27
 380:	51 e1       	ldi	r21, 0x11	; 17
 382:	07 c0       	rjmp	.+14     	; 0x392 <__udivmodhi4_ep>

00000384 <__udivmodhi4_loop>:
 384:	aa 1f       	adc	r26, r26
 386:	bb 1f       	adc	r27, r27
 388:	a6 17       	cp	r26, r22
 38a:	b7 07       	cpc	r27, r23
 38c:	10 f0       	brcs	.+4      	; 0x392 <__udivmodhi4_ep>
 38e:	a6 1b       	sub	r26, r22
 390:	b7 0b       	sbc	r27, r23

00000392 <__udivmodhi4_ep>:
 392:	88 1f       	adc	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	5a 95       	dec	r21
 398:	a9 f7       	brne	.-22     	; 0x384 <__udivmodhi4_loop>
 39a:	80 95       	com	r24
 39c:	90 95       	com	r25
 39e:	bc 01       	movw	r22, r24
 3a0:	cd 01       	movw	r24, r26
 3a2:	08 95       	ret

000003a4 <_exit>:
 3a4:	f8 94       	cli

000003a6 <__stop_program>:
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <__stop_program>
