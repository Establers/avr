
uart_int_seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080012e  0080012e  000003a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b85  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c5  00000000  00000000  00000ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045c  00000000  00000000  000019be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004aa  00000000  00000000  00001ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000134  00000000  00000000  0000238a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000024be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	af c0       	rjmp	.+350    	; 0x1a8 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ee       	ldi	r30, 0xE0	; 224
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 32       	cpi	r26, 0x2E	; 46
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e2       	ldi	r26, 0x2E	; 46
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 34       	cpi	r26, 0x40	; 64
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	0b c1       	rjmp	.+534    	; 0x2dc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
int fnd_sel[4] = {0x0E, 0x0D, 0x0B, 0x07};
int fnd_num[4];

int main(void)
{
	DDRC = 0xff;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 bb       	out	0x14, r24	; 20
	DDRG = 0x0f;
  cc:	8f e0       	ldi	r24, 0x0F	; 15
  ce:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

	uart0_init();
  d2:	c2 d0       	rcall	.+388    	; 0x258 <uart0_init>
	uart0_rx_int_init();
  d4:	d9 d0       	rcall	.+434    	; 0x288 <uart0_rx_int_init>
  d6:	0f 2e       	mov	r0, r31

    while (1) 
    {
		fnd_num[3] = (rxdata/1000)%10;
  d8:	fe e2       	ldi	r31, 0x2E	; 46
  da:	ef 2e       	mov	r14, r31
  dc:	f1 e0       	ldi	r31, 0x01	; 1
  de:	ff 2e       	mov	r15, r31
  e0:	f0 2d       	mov	r31, r0
  e2:	0f 2e       	mov	r0, r31
  e4:	f8 ee       	ldi	r31, 0xE8	; 232
  e6:	af 2e       	mov	r10, r31
  e8:	f3 e0       	ldi	r31, 0x03	; 3
  ea:	bf 2e       	mov	r11, r31
  ec:	f0 2d       	mov	r31, r0
  ee:	2a e0       	ldi	r18, 0x0A	; 10
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	0f 2e       	mov	r0, r31
		fnd_num[2] = (rxdata/100)%10;
  f4:	f4 e6       	ldi	r31, 0x64	; 100
  f6:	cf 2e       	mov	r12, r31
  f8:	d1 2c       	mov	r13, r1
  fa:	f0 2d       	mov	r31, r0
  fc:	08 e0       	ldi	r16, 0x08	; 8
  fe:	11 e0       	ldi	r17, 0x01	; 1
 100:	0f 2e       	mov	r0, r31
		fnd_num[1] = (rxdata/10)%10;
		fnd_num[0] = (rxdata/1)%10;

		for(int i=0; i<4; i++) {
			PORTG = fnd_sel[i];
 102:	f5 e6       	ldi	r31, 0x65	; 101
 104:	8f 2e       	mov	r8, r31
 106:	91 2c       	mov	r9, r1
 108:	f0 2d       	mov	r31, r0
 10a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rxdata>
	uart0_init();
	uart0_rx_int_init();

    while (1) 
    {
		fnd_num[3] = (rxdata/1000)%10;
 10e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <rxdata+0x1>
 112:	b5 01       	movw	r22, r10
 114:	bc d0       	rcall	.+376    	; 0x28e <__divmodhi4>
 116:	cb 01       	movw	r24, r22
 118:	b9 01       	movw	r22, r18
 11a:	b9 d0       	rcall	.+370    	; 0x28e <__divmodhi4>
 11c:	d7 01       	movw	r26, r14
 11e:	17 96       	adiw	r26, 0x07	; 7
 120:	9c 93       	st	X, r25
 122:	8e 93       	st	-X, r24
 124:	16 97       	sbiw	r26, 0x06	; 6
 126:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rxdata>
		fnd_num[2] = (rxdata/100)%10;
 12a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <rxdata+0x1>
 12e:	b6 01       	movw	r22, r12
 130:	ae d0       	rcall	.+348    	; 0x28e <__divmodhi4>
 132:	cb 01       	movw	r24, r22
 134:	b9 01       	movw	r22, r18
 136:	ab d0       	rcall	.+342    	; 0x28e <__divmodhi4>
 138:	e7 01       	movw	r28, r14
 13a:	9d 83       	std	Y+5, r25	; 0x05
 13c:	8c 83       	std	Y+4, r24	; 0x04
 13e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rxdata>
		fnd_num[1] = (rxdata/10)%10;
 142:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <rxdata+0x1>
 146:	b9 01       	movw	r22, r18
 148:	a2 d0       	rcall	.+324    	; 0x28e <__divmodhi4>
 14a:	cb 01       	movw	r24, r22
 14c:	b9 01       	movw	r22, r18
 14e:	9f d0       	rcall	.+318    	; 0x28e <__divmodhi4>
 150:	9b 83       	std	Y+3, r25	; 0x03
 152:	8a 83       	std	Y+2, r24	; 0x02
 154:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rxdata>
		fnd_num[0] = (rxdata/1)%10;
 158:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <rxdata+0x1>
 15c:	b9 01       	movw	r22, r18
 15e:	97 d0       	rcall	.+302    	; 0x28e <__divmodhi4>
 160:	99 83       	std	Y+1, r25	; 0x01
 162:	88 83       	st	Y, r24
 164:	e0 e0       	ldi	r30, 0x00	; 0
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	8e e2       	ldi	r24, 0x2E	; 46
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	40 81       	ld	r20, Z
 16e:	32 96       	adiw	r30, 0x02	; 2

		for(int i=0; i<4; i++) {
			PORTG = fnd_sel[i];
 170:	d4 01       	movw	r26, r8
 172:	4c 93       	st	X, r20
 174:	ec 01       	movw	r28, r24
 176:	a9 91       	ld	r26, Y+
			PORTC = num[fnd_num[i]];
 178:	b9 91       	ld	r27, Y+
 17a:	ce 01       	movw	r24, r28
 17c:	a8 5f       	subi	r26, 0xF8	; 248
 17e:	be 4f       	sbci	r27, 0xFE	; 254
 180:	4c 91       	ld	r20, X
 182:	45 bb       	out	0x15, r20	; 21
 184:	af e3       	ldi	r26, 0x3F	; 63
 186:	bf e1       	ldi	r27, 0x1F	; 31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	11 97       	sbiw	r26, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0xc0>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0xc6>
 18e:	00 00       	nop
 190:	e0 17       	cp	r30, r16
 192:	f1 07       	cpc	r31, r17
		fnd_num[3] = (rxdata/1000)%10;
		fnd_num[2] = (rxdata/100)%10;
		fnd_num[1] = (rxdata/10)%10;
		fnd_num[0] = (rxdata/1)%10;

		for(int i=0; i<4; i++) {
 194:	59 f7       	brne	.-42     	; 0x16c <main+0xa4>
 196:	b9 cf       	rjmp	.-142    	; 0x10a <main+0x42>

00000198 <uart0_trasnmit>:
	 stdin = &INPUT;
	 stdout = &OUTPUT;
 }

 void uart0_trasnmit(char data) {
	 while(!(UCSR0A & (1 << UDRE0)));
 198:	5d 9b       	sbis	0x0b, 5	; 11
 19a:	fe cf       	rjmp	.-4      	; 0x198 <uart0_trasnmit>
	 UDR0 = data;
 19c:	8c b9       	out	0x0c, r24	; 12
 19e:	08 95       	ret

000001a0 <uart0_receive>:
 }

 unsigned char uart0_receive(void) {
	 while(!(UCSR0A & (1 << RXC0)));
 1a0:	5f 9b       	sbis	0x0b, 7	; 11
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <uart0_receive>
	 return UDR0;
 1a4:	8c b1       	in	r24, 0x0c	; 12
 }
 1a6:	08 95       	ret

000001a8 <__vector_18>:
FILE INPUT = FDEV_SETUP_STREAM(uart0_receive, NULL, _FDEV_SETUP_READ);

volatile int flag;
volatile int rxdata;

ISR(USART0_RX_vect) {
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	4f 93       	push	r20
 1b8:	5f 93       	push	r21
 1ba:	6f 93       	push	r22
 1bc:	7f 93       	push	r23
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
	unsigned char tmp = UDR0;
 1c6:	8c b1       	in	r24, 0x0c	; 12
	if(tmp >= '0' && tmp <= '9') {
 1c8:	90 ed       	ldi	r25, 0xD0	; 208
 1ca:	98 0f       	add	r25, r24
 1cc:	9a 30       	cpi	r25, 0x0A	; 10
 1ce:	78 f5       	brcc	.+94     	; 0x22e <__vector_18+0x86>
		if(flag) {
 1d0:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <flag>
 1d4:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <flag+0x1>
 1d8:	23 2b       	or	r18, r19
 1da:	e1 f0       	breq	.+56     	; 0x214 <__vector_18+0x6c>
			rxdata = (rxdata * 10 + tmp - '0') % 10000;
 1dc:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <rxdata>
 1e0:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <rxdata+0x1>
 1e4:	a9 01       	movw	r20, r18
 1e6:	44 0f       	add	r20, r20
 1e8:	55 1f       	adc	r21, r21
 1ea:	22 0f       	add	r18, r18
 1ec:	33 1f       	adc	r19, r19
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	22 0f       	add	r18, r18
 1f4:	33 1f       	adc	r19, r19
 1f6:	24 0f       	add	r18, r20
 1f8:	35 1f       	adc	r19, r21
 1fa:	a9 01       	movw	r20, r18
 1fc:	48 0f       	add	r20, r24
 1fe:	51 1d       	adc	r21, r1
 200:	ca 01       	movw	r24, r20
 202:	c0 97       	sbiw	r24, 0x30	; 48
 204:	60 e1       	ldi	r22, 0x10	; 16
 206:	77 e2       	ldi	r23, 0x27	; 39
 208:	42 d0       	rcall	.+132    	; 0x28e <__divmodhi4>
 20a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <rxdata+0x1>
 20e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <rxdata>
 212:	13 c0       	rjmp	.+38     	; 0x23a <__vector_18+0x92>
		}
		else {
			rxdata = tmp - '0';
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	c0 97       	sbiw	r24, 0x30	; 48
 218:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <rxdata+0x1>
 21c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <rxdata>
			flag = 1;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <flag+0x1>
 228:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <flag>
 22c:	06 c0       	rjmp	.+12     	; 0x23a <__vector_18+0x92>
		}
	}
	else if(tmp == '\r') {
 22e:	8d 30       	cpi	r24, 0x0D	; 13
 230:	21 f4       	brne	.+8      	; 0x23a <__vector_18+0x92>
		flag = 0;
 232:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <flag+0x1>
 236:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <flag>
	}
}
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	7f 91       	pop	r23
 244:	6f 91       	pop	r22
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <uart0_init>:

 void uart0_init(void) {
	 UBRR0H = 0x00;
 258:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	 UBRR0L = 16;
 25c:	80 e1       	ldi	r24, 0x10	; 16
 25e:	89 b9       	out	0x09, r24	; 9
	 
	 UCSR0A |= (1<<U2X0);
 260:	59 9a       	sbi	0x0b, 1	; 11
	 UCSR0C |= 0x06;
 262:	e5 e9       	ldi	r30, 0x95	; 149
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	86 60       	ori	r24, 0x06	; 6
 26a:	80 83       	st	Z, r24

	 UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
 26c:	8a b1       	in	r24, 0x0a	; 10
 26e:	88 61       	ori	r24, 0x18	; 24
 270:	8a b9       	out	0x0a, r24	; 10

	 stdin = &INPUT;
 272:	ea e3       	ldi	r30, 0x3A	; 58
 274:	f1 e0       	ldi	r31, 0x01	; 1
 276:	82 e1       	ldi	r24, 0x12	; 18
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	91 83       	std	Z+1, r25	; 0x01
 27c:	80 83       	st	Z, r24
	 stdout = &OUTPUT;
 27e:	80 e2       	ldi	r24, 0x20	; 32
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	93 83       	std	Z+3, r25	; 0x03
 284:	82 83       	std	Z+2, r24	; 0x02
 286:	08 95       	ret

00000288 <uart0_rx_int_init>:
	 while(!(UCSR0A & (1 << RXC0)));
	 return UDR0;
 }

 void uart0_rx_int_init(void) {
	UCSR0B |= (1 << RXCIE0);
 288:	57 9a       	sbi	0x0a, 7	; 10
	sei();
 28a:	78 94       	sei
 28c:	08 95       	ret

0000028e <__divmodhi4>:
 28e:	97 fb       	bst	r25, 7
 290:	07 2e       	mov	r0, r23
 292:	16 f4       	brtc	.+4      	; 0x298 <__divmodhi4+0xa>
 294:	00 94       	com	r0
 296:	06 d0       	rcall	.+12     	; 0x2a4 <__divmodhi4_neg1>
 298:	77 fd       	sbrc	r23, 7
 29a:	08 d0       	rcall	.+16     	; 0x2ac <__divmodhi4_neg2>
 29c:	0b d0       	rcall	.+22     	; 0x2b4 <__udivmodhi4>
 29e:	07 fc       	sbrc	r0, 7
 2a0:	05 d0       	rcall	.+10     	; 0x2ac <__divmodhi4_neg2>
 2a2:	3e f4       	brtc	.+14     	; 0x2b2 <__divmodhi4_exit>

000002a4 <__divmodhi4_neg1>:
 2a4:	90 95       	com	r25
 2a6:	81 95       	neg	r24
 2a8:	9f 4f       	sbci	r25, 0xFF	; 255
 2aa:	08 95       	ret

000002ac <__divmodhi4_neg2>:
 2ac:	70 95       	com	r23
 2ae:	61 95       	neg	r22
 2b0:	7f 4f       	sbci	r23, 0xFF	; 255

000002b2 <__divmodhi4_exit>:
 2b2:	08 95       	ret

000002b4 <__udivmodhi4>:
 2b4:	aa 1b       	sub	r26, r26
 2b6:	bb 1b       	sub	r27, r27
 2b8:	51 e1       	ldi	r21, 0x11	; 17
 2ba:	07 c0       	rjmp	.+14     	; 0x2ca <__udivmodhi4_ep>

000002bc <__udivmodhi4_loop>:
 2bc:	aa 1f       	adc	r26, r26
 2be:	bb 1f       	adc	r27, r27
 2c0:	a6 17       	cp	r26, r22
 2c2:	b7 07       	cpc	r27, r23
 2c4:	10 f0       	brcs	.+4      	; 0x2ca <__udivmodhi4_ep>
 2c6:	a6 1b       	sub	r26, r22
 2c8:	b7 0b       	sbc	r27, r23

000002ca <__udivmodhi4_ep>:
 2ca:	88 1f       	adc	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	5a 95       	dec	r21
 2d0:	a9 f7       	brne	.-22     	; 0x2bc <__udivmodhi4_loop>
 2d2:	80 95       	com	r24
 2d4:	90 95       	com	r25
 2d6:	bc 01       	movw	r22, r24
 2d8:	cd 01       	movw	r24, r26
 2da:	08 95       	ret

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
