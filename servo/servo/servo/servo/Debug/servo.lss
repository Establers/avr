
servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000280  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df3  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000acb  00000000  00000000  0000120f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067e  00000000  00000000  00001cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000519  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c9  00000000  00000000  000029d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002ca2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__vector_5>
  16:	00 00       	nop
  18:	8f c0       	rjmp	.+286    	; 0x138 <__vector_6>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	cd c0       	rjmp	.+410    	; 0x1e4 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	db c0       	rjmp	.+438    	; 0x27c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
	
	// 서보를 돌린다
	// 돌리기 위해선 PWM 3번 타이머, 14번 고속 PWM(TOP ICR3, OCR3A => OC3A)
	// ICR3 => 20ms 파형을 맞추고, OCR3A = ICR3 * 1/10 => -90, ICR3 * 3/20 => 0, ICR3 * 1/5 => 90
	
	timer3_pwm_init();
  c8:	75 d0       	rcall	.+234    	; 0x1b4 <timer3_pwm_init>
	switch_exti_init();
  ca:	6c d0       	rcall	.+216    	; 0x1a4 <switch_exti_init>
  cc:	ff cf       	rjmp	.-2      	; 0xcc <main+0x4>

000000ce <__vector_5>:
  ce:	1f 92       	push	r1

 #define OCR_MAX 150
 #define OCR_MIN 35

 ISR(INT4_vect)
 {
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	0b b6       	in	r0, 0x3b	; 59
  da:	0f 92       	push	r0
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8f e3       	ldi	r24, 0x3F	; 63
  e6:	9c e9       	ldi	r25, 0x9C	; 156
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <__vector_5+0x1a>
  ec:	00 c0       	rjmp	.+0      	; 0xee <__vector_5+0x20>
  ee:	00 00       	nop
	_delay_ms(10);
	while(!(PINE & (1<<4)));
  f0:	0c 9b       	sbis	0x01, 4	; 1
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <__vector_5+0x22>
  f4:	8f e3       	ldi	r24, 0x3F	; 63
  f6:	9c e9       	ldi	r25, 0x9C	; 156
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <__vector_5+0x2a>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <__vector_5+0x30>
  fe:	00 00       	nop
	_delay_ms(10);
	if(OCR3A - 5 >= OCR_MIN) {
 100:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 104:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 108:	05 97       	sbiw	r24, 0x05	; 5
 10a:	83 97       	sbiw	r24, 0x23	; 35
 10c:	38 f0       	brcs	.+14     	; 0x11c <__vector_5+0x4e>
		OCR3A -= 5;
 10e:	e6 e8       	ldi	r30, 0x86	; 134
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	91 81       	ldd	r25, Z+1	; 0x01
 116:	05 97       	sbiw	r24, 0x05	; 5
 118:	91 83       	std	Z+1, r25	; 0x01
 11a:	80 83       	st	Z, r24
	} 
	EIFR |= (1<<4);
 11c:	88 b7       	in	r24, 0x38	; 56
 11e:	80 61       	ori	r24, 0x10	; 16
 120:	88 bf       	out	0x38, r24	; 56
 }
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0b be       	out	0x3b, r0	; 59
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__vector_6>:

 ISR(INT5_vect) 
 {
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	0b b6       	in	r0, 0x3b	; 59
 144:	0f 92       	push	r0
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
 14e:	8f e3       	ldi	r24, 0x3F	; 63
 150:	9c e9       	ldi	r25, 0x9C	; 156
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <__vector_6+0x1a>
 156:	00 c0       	rjmp	.+0      	; 0x158 <__vector_6+0x20>
 158:	00 00       	nop
	_delay_ms(10);
	while(!(PINE & (1<<5)));
 15a:	0d 9b       	sbis	0x01, 5	; 1
 15c:	fe cf       	rjmp	.-4      	; 0x15a <__vector_6+0x22>
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	9c e9       	ldi	r25, 0x9C	; 156
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <__vector_6+0x2a>
 166:	00 c0       	rjmp	.+0      	; 0x168 <__vector_6+0x30>
 168:	00 00       	nop
	_delay_ms(10);
	if(OCR3A + 5 <= OCR_MAX) {
 16a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 16e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 172:	05 96       	adiw	r24, 0x05	; 5
 174:	87 39       	cpi	r24, 0x97	; 151
 176:	91 05       	cpc	r25, r1
 178:	38 f4       	brcc	.+14     	; 0x188 <__vector_6+0x50>
		OCR3A += 5;
 17a:	e6 e8       	ldi	r30, 0x86	; 134
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	91 81       	ldd	r25, Z+1	; 0x01
 182:	05 96       	adiw	r24, 0x05	; 5
 184:	91 83       	std	Z+1, r25	; 0x01
 186:	80 83       	st	Z, r24
	}
	EIFR |= (1<<5);
 188:	88 b7       	in	r24, 0x38	; 56
 18a:	80 62       	ori	r24, 0x20	; 32
 18c:	88 bf       	out	0x38, r24	; 56
 }
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	0f 90       	pop	r0
 198:	0b be       	out	0x3b, r0	; 59
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <switch_exti_init>:

 void switch_exti_init(void) 
 {
	EICRB |= (1<<ISC41) | (1<<ISC51);
 1a4:	8a b7       	in	r24, 0x3a	; 58
 1a6:	8a 60       	ori	r24, 0x0A	; 10
 1a8:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= (1<<INT4) | (1<<INT5);
 1aa:	89 b7       	in	r24, 0x39	; 57
 1ac:	80 63       	ori	r24, 0x30	; 48
 1ae:	89 bf       	out	0x39, r24	; 57
	sei();
 1b0:	78 94       	sei
 1b2:	08 95       	ret

000001b4 <timer3_pwm_init>:
 
 #include "timer3.h"

 void timer3_pwm_init(void) 
 {
	DDRE |= (1<<3);
 1b4:	13 9a       	sbi	0x02, 3	; 2
	TCCR3A |= (1<<COM3A1) | (1<<WGM31);
 1b6:	eb e8       	ldi	r30, 0x8B	; 139
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	82 68       	ori	r24, 0x82	; 130
 1be:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM33) | (1<<WGM32) | (1<<CS32);
 1c0:	ea e8       	ldi	r30, 0x8A	; 138
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	8c 61       	ori	r24, 0x1C	; 28
 1c8:	80 83       	st	Z, r24
	ICR3 = 1250;
 1ca:	82 ee       	ldi	r24, 0xE2	; 226
 1cc:	94 e0       	ldi	r25, 0x04	; 4
 1ce:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1d2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	OCR3A = 93;
 1d6:	8d e5       	ldi	r24, 0x5D	; 93
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 1de:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 1e2:	08 95       	ret

000001e4 <__vector_18>:
FILE INPUT = FDEV_SETUP_STREAM(NULL, uart0_receive, _FDEV_SETUP_READ);

volatile int flag;
volatile int rxdata;

ISR(USART0_RX_vect) {
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
	unsigned char tmp = UDR0;
 1fa:	8c b1       	in	r24, 0x0c	; 12
	if(tmp >= '0' && tmp <= '9') {
 1fc:	90 ed       	ldi	r25, 0xD0	; 208
 1fe:	98 0f       	add	r25, r24
 200:	9a 30       	cpi	r25, 0x0A	; 10
 202:	58 f5       	brcc	.+86     	; 0x25a <__vector_18+0x76>
		if(flag) {
 204:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_end>
 208:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_end+0x1>
 20c:	23 2b       	or	r18, r19
 20e:	c1 f0       	breq	.+48     	; 0x240 <__vector_18+0x5c>
			rxdata = rxdata * 10 + tmp - '0';
 210:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <rxdata>
 214:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <rxdata+0x1>
 218:	a9 01       	movw	r20, r18
 21a:	44 0f       	add	r20, r20
 21c:	55 1f       	adc	r21, r21
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	22 0f       	add	r18, r18
 224:	33 1f       	adc	r19, r19
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	24 0f       	add	r18, r20
 22c:	35 1f       	adc	r19, r21
 22e:	28 0f       	add	r18, r24
 230:	31 1d       	adc	r19, r1
 232:	20 53       	subi	r18, 0x30	; 48
 234:	31 09       	sbc	r19, r1
 236:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <rxdata+0x1>
 23a:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <rxdata>
 23e:	13 c0       	rjmp	.+38     	; 0x266 <__vector_18+0x82>
		}
		else {
			rxdata = tmp - '0';
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	c0 97       	sbiw	r24, 0x30	; 48
 244:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <rxdata+0x1>
 248:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <rxdata>
			flag = 1;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 254:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 258:	06 c0       	rjmp	.+12     	; 0x266 <__vector_18+0x82>
		}
	}
	else if(tmp == '\r') {
 25a:	8d 30       	cpi	r24, 0x0D	; 13
 25c:	21 f4       	brne	.+8      	; 0x266 <__vector_18+0x82>
		flag = 0;
 25e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 262:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	}
}
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	5f 91       	pop	r21
 26c:	4f 91       	pop	r20
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
