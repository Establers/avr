
delay_ms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000292  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c42  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5d  00000000  00000000  00000ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000531  00000000  00000000  00001a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00001f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b4  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018b  00000000  00000000  00002594  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000271f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	9c c0       	rjmp	.+312    	; 0x182 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e1       	ldi	r30, 0x1E	; 30
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	aa c0       	rjmp	.+340    	; 0x21a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include <avr/io.h>
#include "led.h"

int main(void)
{
	led_init();	
  c8:	04 d0       	rcall	.+8      	; 0xd2 <led_init>
    while (1) 
    {
		led_blink(1000);
  ca:	88 ee       	ldi	r24, 0xE8	; 232
  cc:	93 e0       	ldi	r25, 0x03	; 3
  ce:	04 d0       	rcall	.+8      	; 0xd8 <led_blink>
  d0:	fc cf       	rjmp	.-8      	; 0xca <main+0x2>

000000d2 <led_init>:

 #include "led.h"

 void led_init(void)
 {
	DDRA = 0xff;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	08 95       	ret

000000d8 <led_blink>:
 }

 void led_blink(int mstime)
 {
	PORTA ^= 0xff;
  d8:	2b b3       	in	r18, 0x1b	; 27
  da:	20 95       	com	r18
  dc:	2b bb       	out	0x1b, r18	; 27
	delay_ms(mstime);
  de:	2e c0       	rjmp	.+92     	; 0x13c <delay_ms>
  e0:	08 95       	ret

000000e2 <__vector_16>:

 #include "timer.h"

 volatile unsigned long timer0_millis = 0;
 
 ISR(TIMER0_OVF_vect) {
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	af 93       	push	r26
  f2:	bf 93       	push	r27
	timer0_millis += 1;	
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
  fc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end+0x2>
 100:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x3>
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	a1 1d       	adc	r26, r1
 108:	b1 1d       	adc	r27, r1
 10a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 10e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 112:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_end+0x2>
 116:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_end+0x3>
 }
 11a:	bf 91       	pop	r27
 11c:	af 91       	pop	r26
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <timer0_ovf_init>:

 void timer0_ovf_init(void) {
	TCCR0 |= (1<<CS02);
 12c:	83 b7       	in	r24, 0x33	; 51
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
 132:	87 b7       	in	r24, 0x37	; 55
 134:	81 60       	ori	r24, 0x01	; 1
 136:	87 bf       	out	0x37, r24	; 55
	sei();
 138:	78 94       	sei
 13a:	08 95       	ret

0000013c <delay_ms>:
 }

 void delay_ms(int mstime) {
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
	timer0_ovf_init();
 142:	f4 df       	rcall	.-24     	; 0x12c <timer0_ovf_init>
	timer0_millis = 0;
 144:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 148:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 14c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end+0x2>
 150:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x3>
	TCNT0 = 5;
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	82 bf       	out	0x32, r24	; 50
	
	while(mstime - timer0_millis > 0);
 158:	ce 01       	movw	r24, r28
 15a:	dd 0f       	add	r29, r29
 15c:	aa 0b       	sbc	r26, r26
 15e:	bb 0b       	sbc	r27, r27
 160:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_end>
 164:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_end+0x1>
 168:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_end+0x2>
 16c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_end+0x3>
 170:	84 17       	cp	r24, r20
 172:	95 07       	cpc	r25, r21
 174:	a6 07       	cpc	r26, r22
 176:	b7 07       	cpc	r27, r23
 178:	99 f7       	brne	.-26     	; 0x160 <delay_ms+0x24>

	cli();
 17a:	f8 94       	cli
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <__vector_18>:
FILE INPUT = FDEV_SETUP_STREAM(NULL, uart0_receive, _FDEV_SETUP_READ);

volatile int flag;
volatile int rxdata;

ISR(USART0_RX_vect) {
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	2f 93       	push	r18
 18e:	3f 93       	push	r19
 190:	4f 93       	push	r20
 192:	5f 93       	push	r21
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
	unsigned char tmp = UDR0;
 198:	8c b1       	in	r24, 0x0c	; 12
	if(tmp >= '0' && tmp <= '9') {
 19a:	90 ed       	ldi	r25, 0xD0	; 208
 19c:	98 0f       	add	r25, r24
 19e:	9a 30       	cpi	r25, 0x0A	; 10
 1a0:	58 f5       	brcc	.+86     	; 0x1f8 <__vector_18+0x76>
		if(flag) {
 1a2:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <flag>
 1a6:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <flag+0x1>
 1aa:	23 2b       	or	r18, r19
 1ac:	c1 f0       	breq	.+48     	; 0x1de <__vector_18+0x5c>
			rxdata = rxdata * 10 + tmp - '0';
 1ae:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <rxdata>
 1b2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <rxdata+0x1>
 1b6:	a9 01       	movw	r20, r18
 1b8:	44 0f       	add	r20, r20
 1ba:	55 1f       	adc	r21, r21
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	22 0f       	add	r18, r18
 1c6:	33 1f       	adc	r19, r19
 1c8:	24 0f       	add	r18, r20
 1ca:	35 1f       	adc	r19, r21
 1cc:	28 0f       	add	r18, r24
 1ce:	31 1d       	adc	r19, r1
 1d0:	20 53       	subi	r18, 0x30	; 48
 1d2:	31 09       	sbc	r19, r1
 1d4:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <rxdata+0x1>
 1d8:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <rxdata>
 1dc:	13 c0       	rjmp	.+38     	; 0x204 <__vector_18+0x82>
		}
		else {
			rxdata = tmp - '0';
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	c0 97       	sbiw	r24, 0x30	; 48
 1e2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <rxdata+0x1>
 1e6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <rxdata>
			flag = 1;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <flag+0x1>
 1f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <flag>
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <__vector_18+0x82>
		}
	}
	else if(tmp == '\r') {
 1f8:	8d 30       	cpi	r24, 0x0D	; 13
 1fa:	21 f4       	brne	.+8      	; 0x204 <__vector_18+0x82>
		flag = 0;
 1fc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag+0x1>
 200:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag>
	}
}
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
