
forclass2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d2  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cc  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039c  00000000  00000000  00001556  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000018f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000404  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000089  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	59 c0       	rjmp	.+178    	; 0x15e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
#include <avr/io.h>
#include "led.h"

int main(void)
{
	led_init();	
  ae:	04 d0       	rcall	.+8      	; 0xb8 <led_init>
    while (1) 
    {
		led_blink(500);
  b0:	84 ef       	ldi	r24, 0xF4	; 244
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	04 d0       	rcall	.+8      	; 0xbe <led_blink>
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <main+0x2>

000000b8 <led_init>:

#include "led.h"

void led_init(void)
{
	DDRA = 0xff;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a bb       	out	0x1a, r24	; 26
  bc:	08 95       	ret

000000be <led_blink>:
}

void led_blink(int mstime)
{
	PORTA ^= 0xff;
  be:	2b b3       	in	r18, 0x1b	; 27
  c0:	20 95       	com	r18
  c2:	2b bb       	out	0x1b, r18	; 27
	delay_ms(mstime);
  c4:	28 c0       	rjmp	.+80     	; 0x116 <delay_ms>
  c6:	08 95       	ret

000000c8 <__vector_16>:

#include "timer.h"

volatile unsigned long millis;

ISR(TIMER0_OVF_vect) {
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
	TCNT0 = 5;
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	82 bf       	out	0x32, r24	; 50
	millis += 1;
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  ea:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	a1 1d       	adc	r26, r1
  f2:	b1 1d       	adc	r27, r1
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  fc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 100:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
}
 104:	bf 91       	pop	r27
 106:	af 91       	pop	r26
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <delay_ms>:

void delay_ms(int mstime)
{
	TCCR0 |= (1<<CS02);
 116:	23 b7       	in	r18, 0x33	; 51
 118:	24 60       	ori	r18, 0x04	; 4
 11a:	23 bf       	out	0x33, r18	; 51
	TIMSK |= (1<<TOIE0);
 11c:	27 b7       	in	r18, 0x37	; 55
 11e:	21 60       	ori	r18, 0x01	; 1
 120:	27 bf       	out	0x37, r18	; 55
	TCNT0 = 5;
 122:	25 e0       	ldi	r18, 0x05	; 5
 124:	22 bf       	out	0x32, r18	; 50
	millis = 0;
 126:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 12a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 12e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 132:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
	sei();
 136:	78 94       	sei
	
	while(mstime != millis);
 138:	09 2e       	mov	r0, r25
 13a:	00 0c       	add	r0, r0
 13c:	aa 0b       	sbc	r26, r26
 13e:	bb 0b       	sbc	r27, r27
 140:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 144:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
 148:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_edata+0x2>
 14c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <_edata+0x3>
 150:	84 17       	cp	r24, r20
 152:	95 07       	cpc	r25, r21
 154:	a6 07       	cpc	r26, r22
 156:	b7 07       	cpc	r27, r23
 158:	99 f7       	brne	.-26     	; 0x140 <delay_ms+0x2a>

	cli(); 
 15a:	f8 94       	cli
 15c:	08 95       	ret

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
