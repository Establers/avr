
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000180  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080013c  0080013c  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2a  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c5  00000000  00000000  00000d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000374  00000000  00000000  000015ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00001974  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000454  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000bf  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001f0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	45 c0       	rjmp	.+138    	; 0xcc <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 33       	cpi	r26, 0x3C	; 60
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e3       	ldi	r26, 0x3C	; 60
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 34       	cpi	r26, 0x40	; 64
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	5b c0       	rjmp	.+182    	; 0x17c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include "timer.h"

int main(void)
{
    // timer1_pwm_init();
	buzzer_init();
  c8:	32 d0       	rcall	.+100    	; 0x12e <buzzer_init>
  ca:	ff cf       	rjmp	.-2      	; 0xca <main+0x2>

000000cc <__vector_16>:
 void timer1_pwm_init(void) 
 {
	TCCR1A |= (1<<WGM11) | (1<<COM1A1);
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS10);
	DDRB |= (1<<5);
	ICR1 = 5000;
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	0b b6       	in	r0, 0x3b	; 59
  d8:	0f 92       	push	r0
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
  e2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <state>
  e6:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <state+0x1>
  ea:	89 2b       	or	r24, r25
  ec:	41 f4       	brne	.+16     	; 0xfe <__vector_16+0x32>
  ee:	c4 9a       	sbi	0x18, 4	; 24
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <state+0x1>
  f8:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <state>
  fc:	05 c0       	rjmp	.+10     	; 0x108 <__vector_16+0x3c>
  fe:	c4 98       	cbi	0x18, 4	; 24
 100:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <state+0x1>
 104:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <state>
 108:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <__data_end>
 10c:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <__data_end+0x1>
 110:	ec 5c       	subi	r30, 0xCC	; 204
 112:	fe 4f       	sbci	r31, 0xFE	; 254
 114:	80 81       	ld	r24, Z
 116:	82 bf       	out	0x32, r24	; 50
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0b be       	out	0x3b, r0	; 59
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <buzzer_init>:
 }

 void buzzer_init(void)
 {
	DDRB |= (1<<4);
 12e:	bc 9a       	sbi	0x17, 4	; 23
	TCCR0 |= (1<<2);
 130:	83 b7       	in	r24, 0x33	; 51
 132:	84 60       	ori	r24, 0x04	; 4
 134:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
 136:	87 b7       	in	r24, 0x37	; 55
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	87 bf       	out	0x37, r24	; 55

	sei();
 13c:	78 94       	sei
	for(int i=0; song[i] != EOS; i++) {
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 142:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 146:	8f 3f       	cpi	r24, 0xFF	; 255
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	92 07       	cpc	r25, r18
 14c:	a9 f0       	breq	.+42     	; 0x178 <buzzer_init+0x4a>
 14e:	e2 e0       	ldi	r30, 0x02	; 2
 150:	f1 e0       	ldi	r31, 0x01	; 1
		tone = song[i];
 152:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
 156:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	99 e6       	ldi	r25, 0x69	; 105
 15e:	28 e1       	ldi	r18, 0x18	; 24
 160:	81 50       	subi	r24, 0x01	; 1
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	20 40       	sbci	r18, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <buzzer_init+0x32>
 168:	00 c0       	rjmp	.+0      	; 0x16a <buzzer_init+0x3c>
 16a:	00 00       	nop
	DDRB |= (1<<4);
	TCCR0 |= (1<<2);
	TIMSK |= (1<<TOIE0);

	sei();
	for(int i=0; song[i] != EOS; i++) {
 16c:	81 91       	ld	r24, Z+
 16e:	91 91       	ld	r25, Z+
 170:	8f 3f       	cpi	r24, 0xFF	; 255
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	92 07       	cpc	r25, r18
 176:	69 f7       	brne	.-38     	; 0x152 <buzzer_init+0x24>
		tone = song[i];
		_delay_ms(500);
	}
	cli();
 178:	f8 94       	cli
 17a:	08 95       	ret

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
