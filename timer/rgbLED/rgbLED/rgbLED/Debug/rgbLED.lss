
rgbLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000178  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800106  00800106  00000212  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009fb  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b3  00000000  00000000  00000cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b4  00000000  00000000  00001572  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001928  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000437  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000dc  00000000  00000000  00001da7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	57 c0       	rjmp	.+174    	; 0x174 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
uint8_t *ocr[3] = {&OCR3A, &OCR3B, &OCR3C}; 
bool check[3];

int main(void)
{
	timer3_pwm_init();
  c8:	41 d0       	rcall	.+130    	; 0x14c <timer3_pwm_init>
    while (1) 
    {
		for(int i=1; i<(1<<3); i++) {
			memset(check, 0, sizeof(check));
  ca:	66 e0       	ldi	r22, 0x06	; 6
  cc:	71 e0       	ldi	r23, 0x01	; 1
  ce:	03 e0       	ldi	r16, 0x03	; 3
			for(int j=0; j<3; j++) {
				if(i & (1<<j)) {
					check[j] = true;			
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	49 e0       	ldi	r20, 0x09	; 9
  d4:	51 e0       	ldi	r21, 0x01	; 1
int main(void)
{
	timer3_pwm_init();
    while (1) 
    {
		for(int i=1; i<(1<<3); i++) {
  d6:	c1 e0       	ldi	r28, 0x01	; 1
  d8:	d0 e0       	ldi	r29, 0x00	; 0
			memset(check, 0, sizeof(check));
  da:	fb 01       	movw	r30, r22
  dc:	80 2f       	mov	r24, r16
  de:	11 92       	st	Z+, r1
  e0:	8a 95       	dec	r24
  e2:	e9 f7       	brne	.-6      	; 0xde <main+0x16>
  e4:	e6 e0       	ldi	r30, 0x06	; 6
  e6:	f1 e0       	ldi	r31, 0x01	; 1
			for(int j=0; j<3; j++) {
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
				if(i & (1<<j)) {
  ec:	9e 01       	movw	r18, r28
  ee:	08 2e       	mov	r0, r24
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <main+0x2e>
  f2:	35 95       	asr	r19
  f4:	27 95       	ror	r18
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <main+0x2a>
  fa:	20 fd       	sbrc	r18, 0
					check[j] = true;			
  fc:	10 83       	st	Z, r17
	timer3_pwm_init();
    while (1) 
    {
		for(int i=1; i<(1<<3); i++) {
			memset(check, 0, sizeof(check));
			for(int j=0; j<3; j++) {
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	31 96       	adiw	r30, 0x01	; 1
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	91 05       	cpc	r25, r1
 106:	91 f7       	brne	.-28     	; 0xec <main+0x24>
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	16 c0       	rjmp	.+44     	; 0x13a <main+0x72>
					check[j] = true;			
				}
			}
			for(int j=0; j<=1000; j++) {
				for(int k=0; k<3; k++) {
					if(check[k]) {
 10e:	81 91       	ld	r24, Z+
 110:	88 23       	and	r24, r24
 112:	19 f0       	breq	.+6      	; 0x11a <main+0x52>
						ocr[k] = j;
 114:	11 96       	adiw	r26, 0x01	; 1
 116:	3c 93       	st	X, r19
 118:	2e 93       	st	-X, r18
 11a:	12 96       	adiw	r26, 0x02	; 2
				if(i & (1<<j)) {
					check[j] = true;			
				}
			}
			for(int j=0; j<=1000; j++) {
				for(int k=0; k<3; k++) {
 11c:	e4 17       	cp	r30, r20
 11e:	f5 07       	cpc	r31, r21
 120:	b1 f7       	brne	.-20     	; 0x10e <main+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	ef e9       	ldi	r30, 0x9F	; 159
 124:	ff e0       	ldi	r31, 0x0F	; 15
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x5e>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x64>
 12c:	00 00       	nop
			for(int j=0; j<3; j++) {
				if(i & (1<<j)) {
					check[j] = true;			
				}
			}
			for(int j=0; j<=1000; j++) {
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	29 3e       	cpi	r18, 0xE9	; 233
 134:	f3 e0       	ldi	r31, 0x03	; 3
 136:	3f 07       	cpc	r19, r31
 138:	21 f0       	breq	.+8      	; 0x142 <main+0x7a>
 13a:	a0 e0       	ldi	r26, 0x00	; 0
 13c:	b1 e0       	ldi	r27, 0x01	; 1
	timer3_pwm_init();
    while (1) 
    {
		for(int i=1; i<(1<<3); i++) {
			memset(check, 0, sizeof(check));
			for(int j=0; j<3; j++) {
 13e:	fb 01       	movw	r30, r22
 140:	e6 cf       	rjmp	.-52     	; 0x10e <main+0x46>
int main(void)
{
	timer3_pwm_init();
    while (1) 
    {
		for(int i=1; i<(1<<3); i++) {
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	c8 30       	cpi	r28, 0x08	; 8
 146:	d1 05       	cpc	r29, r1
 148:	41 f6       	brne	.-112    	; 0xda <main+0x12>
 14a:	c5 cf       	rjmp	.-118    	; 0xd6 <main+0xe>

0000014c <timer3_pwm_init>:
 */ 
 #include "timer.h"

 void timer3_pwm_init(void) 
 {
	DDRE |= (1<<PORTE3) | (1<<PORTE4) | (1<<PORTE5);
 14c:	82 b1       	in	r24, 0x02	; 2
 14e:	88 63       	ori	r24, 0x38	; 56
 150:	82 b9       	out	0x02, r24	; 2
	TCCR3A |= (1<<COM3A1) | (1<<WGM31);
 152:	eb e8       	ldi	r30, 0x8B	; 139
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	82 68       	ori	r24, 0x82	; 130
 15a:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM33) | (1<<WGM32) | (1<<CS12) | (1<<CS10);
 15c:	ea e8       	ldi	r30, 0x8A	; 138
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	8d 61       	ori	r24, 0x1D	; 29
 164:	80 83       	st	Z, r24

	ICR3 = 1000;
 166:	88 ee       	ldi	r24, 0xE8	; 232
 168:	93 e0       	ldi	r25, 0x03	; 3
 16a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 16e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 172:	08 95       	ret

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
