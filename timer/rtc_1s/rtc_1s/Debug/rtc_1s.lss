
rtc_1s.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000262  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b78  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097c  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e7  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049b  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012d  00000000  00000000  0000232b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	74 c0       	rjmp	.+232    	; 0x126 <__vector_15>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	84 c0       	rjmp	.+264    	; 0x152 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ee       	ldi	r30, 0xEE	; 238
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	92 c0       	rjmp	.+292    	; 0x1ea <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include "timer0.h"
#include "uart.h"

int main(void)
{
	DDRA = 0xff;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
	timer0_ovf_init();
  cc:	36 d0       	rcall	.+108    	; 0x13a <timer0_ovf_init>
	rtc_init();
  ce:	3d d0       	rcall	.+122    	; 0x14a <rtc_init>
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x8>

000000d2 <__vector_16>:
  d2:	1f 92       	push	r1
}

void timer0_comp_init(void) {
	TCCR0 |= (1<<CS02) | (1<<CS01) | (1<<CS00);
	TIMSK |= (1<<OCIE0);
	sei();	
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_end>
  e8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_end+0x1>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	23 2b       	or	r18, r19
  f2:	11 f0       	breq	.+4      	; 0xf8 <__vector_16+0x26>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 104:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 108:	89 2b       	or	r24, r25
 10a:	19 f0       	breq	.+6      	; 0x112 <__vector_16+0x40>
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	8b bb       	out	0x1b, r24	; 27
 110:	01 c0       	rjmp	.+2      	; 0x114 <__vector_16+0x42>
 112:	1b ba       	out	0x1b, r1	; 27
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	3f 91       	pop	r19
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <__vector_15>:
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <timer0_ovf_init>:
 13a:	83 b7       	in	r24, 0x33	; 51
 13c:	85 60       	ori	r24, 0x05	; 5
 13e:	83 bf       	out	0x33, r24	; 51
 140:	87 b7       	in	r24, 0x37	; 55
 142:	81 60       	ori	r24, 0x01	; 1
 144:	87 bf       	out	0x37, r24	; 55
 146:	78 94       	sei
 148:	08 95       	ret

0000014a <rtc_init>:
}

void rtc_init(void) {
	ASSR |= (1<<AS0);
 14a:	80 b7       	in	r24, 0x30	; 48
 14c:	88 60       	ori	r24, 0x08	; 8
 14e:	80 bf       	out	0x30, r24	; 48
 150:	08 95       	ret

00000152 <__vector_18>:
FILE INPUT = FDEV_SETUP_STREAM(uart0_receive, NULL, _FDEV_SETUP_READ);

volatile int flag;
volatile int rxdata;

ISR(USART0_RX_vect) {
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
	unsigned char tmp = UDR0;
 168:	8c b1       	in	r24, 0x0c	; 12
	if(tmp >= '0' && tmp <= '9') {
 16a:	90 ed       	ldi	r25, 0xD0	; 208
 16c:	98 0f       	add	r25, r24
 16e:	9a 30       	cpi	r25, 0x0A	; 10
 170:	58 f5       	brcc	.+86     	; 0x1c8 <__vector_18+0x76>
		if(flag) {
 172:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <flag>
 176:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <flag+0x1>
 17a:	23 2b       	or	r18, r19
 17c:	c1 f0       	breq	.+48     	; 0x1ae <__vector_18+0x5c>
			rxdata = rxdata * 10 + tmp - '0';
 17e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <rxdata>
 182:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <rxdata+0x1>
 186:	a9 01       	movw	r20, r18
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	22 0f       	add	r18, r18
 18e:	33 1f       	adc	r19, r19
 190:	22 0f       	add	r18, r18
 192:	33 1f       	adc	r19, r19
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	24 0f       	add	r18, r20
 19a:	35 1f       	adc	r19, r21
 19c:	28 0f       	add	r18, r24
 19e:	31 1d       	adc	r19, r1
 1a0:	20 53       	subi	r18, 0x30	; 48
 1a2:	31 09       	sbc	r19, r1
 1a4:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <rxdata+0x1>
 1a8:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <rxdata>
 1ac:	13 c0       	rjmp	.+38     	; 0x1d4 <__vector_18+0x82>
		}
		else {
			rxdata = tmp - '0';
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	c0 97       	sbiw	r24, 0x30	; 48
 1b2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <rxdata+0x1>
 1b6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rxdata>
			flag = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <flag+0x1>
 1c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag>
 1c6:	06 c0       	rjmp	.+12     	; 0x1d4 <__vector_18+0x82>
		}
	}
	else if(tmp == '\r') {
 1c8:	8d 30       	cpi	r24, 0x0D	; 13
 1ca:	21 f4       	brne	.+8      	; 0x1d4 <__vector_18+0x82>
		flag = 0;
 1cc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <flag+0x1>
 1d0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag>
	}
}
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	5f 91       	pop	r21
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
