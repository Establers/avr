
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000188  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800128  00800128  00000244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a37  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000921  00000000  00000000  00000d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000323  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000450  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e2       	ldi	r26, 0x28	; 40
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 32       	cpi	r26, 0x2E	; 46
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	18 d0       	rcall	.+48     	; 0xf4 <main>
  c4:	5f c0       	rjmp	.+190    	; 0x184 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <uart0_trasnmit>:

	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
}

void uart0_trasnmit(char data) {
	while(!(UCSR0A & (1 << UDRE0)));
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <uart0_trasnmit>
	UDR0 = data;
  cc:	8c b9       	out	0x0c, r24	; 12
  ce:	08 95       	ret

000000d0 <uart0_receive>:
}

unsigned char uart0_receive(void) {
	while(!(UCSR0A & (1 << RXC0)));
  d0:	5f 9b       	sbis	0x0b, 7	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <uart0_receive>
	return UDR0;
  d4:	8c b1       	in	r24, 0x0c	; 12
  d6:	08 95       	ret

000000d8 <uart0_init>:
		printf("helloworld\r\n");
	}
}

void uart0_init(void) {
	UBRR0H = 0x00;
  d8:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;
  dc:	8f ec       	ldi	r24, 0xCF	; 207
  de:	89 b9       	out	0x09, r24	; 9
	
	UCSR0A |= (1<<U2X0);
  e0:	59 9a       	sbi	0x0b, 1	; 11
	UCSR0C |= 0x06;
  e2:	e5 e9       	ldi	r30, 0x95	; 149
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	86 60       	ori	r24, 0x06	; 6
  ea:	80 83       	st	Z, r24

	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
  ec:	8a b1       	in	r24, 0x0a	; 10
  ee:	88 61       	ori	r24, 0x18	; 24
  f0:	8a b9       	out	0x0a, r24	; 10
  f2:	08 95       	ret

000000f4 <main>:
FILE INPUT
		= FDEV_SETUP_STREAM(NULL, uart0_receive, _FDEV_SETUP_READ);

int main(void)
{
	uart0_init();
  f4:	f1 df       	rcall	.-30     	; 0xd8 <uart0_init>
	stdout = &OUTPUT;
  f6:	e8 e2       	ldi	r30, 0x28	; 40
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	8e e0       	ldi	r24, 0x0E	; 14
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	93 83       	std	Z+3, r25	; 0x03
 100:	82 83       	std	Z+2, r24	; 0x02
	stdin = &INPUT;
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	91 83       	std	Z+1, r25	; 0x01
 108:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	81 ee       	ldi	r24, 0xE1	; 225
 10e:	94 e0       	ldi	r25, 0x04	; 4
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x1c>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x26>
 11a:	00 00       	nop

	int num;
	while (1) 
    {
		_delay_ms(100);		
		printf("helloworld\r\n");
 11c:	8c e1       	ldi	r24, 0x1C	; 28
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	01 d0       	rcall	.+2      	; 0x124 <puts>
 122:	f3 cf       	rjmp	.-26     	; 0x10a <main+0x16>

00000124 <puts>:
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end+0x2>
 130:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__data_end+0x3>
 134:	23 81       	ldd	r18, Z+3	; 0x03
 136:	21 ff       	sbrs	r18, 1
 138:	1b c0       	rjmp	.+54     	; 0x170 <puts+0x4c>
 13a:	8c 01       	movw	r16, r24
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 13e:	c0 e0       	ldi	r28, 0x00	; 0
 140:	f8 01       	movw	r30, r16
 142:	81 91       	ld	r24, Z+
 144:	8f 01       	movw	r16, r30
 146:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <__data_end+0x2>
 14a:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <__data_end+0x3>
 14e:	db 01       	movw	r26, r22
 150:	18 96       	adiw	r26, 0x08	; 8
 152:	ed 91       	ld	r30, X+
 154:	fc 91       	ld	r31, X
 156:	19 97       	sbiw	r26, 0x09	; 9
 158:	88 23       	and	r24, r24
 15a:	31 f0       	breq	.+12     	; 0x168 <puts+0x44>
 15c:	09 95       	icall
 15e:	89 2b       	or	r24, r25
 160:	79 f3       	breq	.-34     	; 0x140 <puts+0x1c>
 162:	df ef       	ldi	r29, 0xFF	; 255
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	ec cf       	rjmp	.-40     	; 0x140 <puts+0x1c>
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	09 95       	icall
 16c:	89 2b       	or	r24, r25
 16e:	19 f0       	breq	.+6      	; 0x176 <puts+0x52>
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	9f ef       	ldi	r25, 0xFF	; 255
 174:	02 c0       	rjmp	.+4      	; 0x17a <puts+0x56>
 176:	8d 2f       	mov	r24, r29
 178:	9c 2f       	mov	r25, r28
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
